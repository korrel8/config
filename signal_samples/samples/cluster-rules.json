{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:40Z",
    "generation": 1,
    "name": "cloud-credential-operator-alerts",
    "namespace": "openshift-cloud-credential-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1656",
    "uid": "1fff3fdf-e044-4aa6-b37c-4aa4103159c2"
  },
  "spec": {
    "groups": [
      {
        "name": "CloudCredentialOperator",
        "rules": [
          {
            "alert": "CloudCredentialOperatorTargetNamespaceMissing",
            "annotations": {
              "description": "At least one CredentialsRequest custom resource has specified in its .spec.secretRef.namespace field a namespace which does not presently exist. This means the Cloud Credential Operator in the openshift-cloud-credential-operator namespace cannot process the CredentialsRequest resource. Check the conditions of all CredentialsRequests with 'oc get credentialsrequest -A' to find any CredentialsRequest(s) with a .status.condition showing a condition type of MissingTargetNamespace set to True.",
              "message": "CredentialsRequest(s) pointing to non-existent namespace",
              "summary": "One ore more CredentialsRequest CRs are asking to save credentials to a non-existent namespace."
            },
            "expr": "cco_credentials_requests_conditions{condition=\"MissingTargetNamespace\"} > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CloudCredentialOperatorProvisioningFailed",
            "annotations": {
              "description": "While processing a CredentialsRequest, the Cloud Credential Operator encountered an issue. Check the conditions of all CredentialsRequets with 'oc get credentialsrequest -A' to find any CredentialsRequest(s) with a .stats.condition showing a condition type of CredentialsProvisionFailure set to True for more details on the issue.",
              "message": "CredentialsRequest(s) unable to be fulfilled",
              "summary": "One or more CredentialsRequest CRs are unable to be processed."
            },
            "expr": "cco_credentials_requests_conditions{condition=\"CredentialsProvisionFailure\"} > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CloudCredentialOperatorDeprovisioningFailed",
            "annotations": {
              "description": "While processing a CredentialsRequest marked for deletion, the Cloud Credential Operator encountered an issue. Check the conditions of all CredentialsRequests with 'oc get credentialsrequest -A' to find any CredentialsRequest(s) with a .status.condition showing a condition type of CredentialsDeprovisionFailure set to True for more details on the issue.",
              "message": "CredentialsRequest(s) unable to be cleaned up",
              "summary": "One or more CredentialsRequest CRs are unable to be deleted."
            },
            "expr": "cco_credentials_requests_conditions{condition=\"CredentialsDeprovisionFailure\"} > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CloudCredentialOperatorInsufficientCloudCreds",
            "annotations": {
              "description": "The Cloud Credential Operator has determined that there are insufficient permissions to process one or more CredentialsRequest CRs. Check the conditions of all CredentialsRequests with 'oc get credentialsrequest -A' to find any CredentialsRequest(s) with a .status.condition showing a condition type of InsufficientCloudCreds set to True for more details.",
              "message": "Cluster's cloud credentials insufficient for minting or passthrough",
              "summary": "Problem with the available platform credentials."
            },
            "expr": "cco_credentials_requests_conditions{condition=\"InsufficientCloudCreds\"} > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CloudCredentialOperatorStaleCredentials",
            "annotations": {
              "description": "The Cloud Credential Operator (CCO) has detected one or more stale CredentialsRequest CRs that need to be manually deleted. When the CCO is in Manual credentials mode, it will not automatially clean up stale CredentialsRequest CRs (that may no longer be necessary in the present version of OpenShift because it could involve needing to clean up manually created cloud resources. Check the conditions of all CredentialsRequests with 'oc get credentialsrequest -A' to find any CredentialsRequest(s) with a .status.condition showing a condition type of StaleCredentials set to True. Determine the appropriate steps to clean up/deprovision any previously provisioned cloud resources. Finally, delete the CredentialsRequest with an 'oc delete'.",
              "message": "1 or more credentials requests are stale and should be deleted. Check the status.conditions on CredentialsRequest CRs to identify the stale one(s).",
              "summary": "One or more CredentialsRequest CRs are stale and should be deleted."
            },
            "expr": "cco_credentials_requests_conditions{condition=\"StaleCredentials\"} > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:39Z",
    "generation": 1,
    "labels": {
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "machineapprover-rules",
    "namespace": "openshift-cluster-machine-approver",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1646",
    "uid": "9788f084-1e1e-4dba-a431-9f18cc766e10"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-machine-approver.rules",
        "rules": [
          {
            "alert": "MachineApproverMaxPendingCSRsReached",
            "annotations": {
              "description": "The number of pending CertificateSigningRequests has exceeded the\nmaximum threshold (current number of machine + 100). Check the\npending CSRs to determine which machines need approval, also check\nthat the nodelink controller is running in the openshift-machine-api\nnamespace.\n",
              "summary": "max pending CSRs threshold reached."
            },
            "expr": "mapi_current_pending_csr > mapi_max_pending_csr\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:39Z",
    "generation": 1,
    "labels": {
      "role": "alert-rules"
    },
    "name": "node-tuning-operator",
    "namespace": "openshift-cluster-node-tuning-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1639",
    "uid": "3d37a58a-ba7a-4933-be8c-2060f3259141"
  },
  "spec": {
    "groups": [
      {
        "name": "node-tuning-operator.rules",
        "rules": [
          {
            "alert": "NTOPodsNotReady",
            "annotations": {
              "description": "Pod {{ $labels.pod }} is not ready.\nReview the \"Event\" objects in \"openshift-cluster-node-tuning-operator\" namespace for further details.\n",
              "summary": "Pod {{ $labels.pod }} is not ready."
            },
            "expr": "kube_pod_status_ready{namespace='openshift-cluster-node-tuning-operator', condition='true'} == 0\n",
            "for": "30m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NTODegraded",
            "annotations": {
              "description": "The Node Tuning Operator is degraded. Review the \"node-tuning\" ClusterOperator object for further details.",
              "summary": "The Node Tuning Operator is degraded."
            },
            "expr": "nto_degraded_info == 1",
            "for": "2h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "expr": "count(nto_profile_calculated_total{profile!~\"openshift-node\",profile!~\"openshift-control-plane\",profile!~\"openshift\"})",
            "record": "nto_custom_profiles:count"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "capability.openshift.io/name": "openshift-samples",
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:38Z",
    "generation": 1,
    "labels": {
      "name": "samples-operator-alerts"
    },
    "name": "samples-operator-alerts",
    "namespace": "openshift-cluster-samples-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1616",
    "uid": "eba2ba0d-941a-4c51-a1cd-062661db55a9"
  },
  "spec": {
    "groups": [
      {
        "name": "SamplesOperator",
        "rules": [
          {
            "alert": "SamplesRetriesMissingOnImagestreamImportFailing",
            "annotations": {
              "description": "Samples operator is detecting problems with imagestream image imports, and the periodic retries of those\nimports are not occurring.  Contact support.  You can look at the \"openshift-samples\" ClusterOperator object\nfor details. Most likely there are issues with the external image registry hosting the images that need to\nbe investigated.  The list of ImageStreams that have failing imports are:\n{{ range query \"openshift_samples_failed_imagestream_import_info > 0\" }}\n  {{ .Labels.name }}\n{{ end }}\nHowever, the list of ImageStreams for which samples operator is retrying imports is:\nretrying imports:\n{{ range query \"openshift_samples_retry_imagestream_import_total > 0\" }}\n   {{ .Labels.imagestreamname }}\n{{ end }}\n",
              "summary": "Samples operator is having problems with imagestream imports and its retries."
            },
            "expr": "sum(openshift_samples_failed_imagestream_import_info) > sum(openshift_samples_retry_imagestream_import_total) - sum(openshift_samples_retry_imagestream_import_total offset 30m)",
            "for": "2h",
            "labels": {
              "namespace": "openshift-cluster-samples-operator",
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesImagestreamImportFailing",
            "annotations": {
              "description": "Samples operator is detecting problems with imagestream image imports.  You can look at the \"openshift-samples\"\nClusterOperator object for details. Most likely there are issues with the external image registry hosting\nthe images that needs to be investigated.  Or you can consider marking samples operator Removed if you do not\ncare about having sample imagestreams available.  The list of ImageStreams for which samples operator is\nretrying imports:\n{{ range query \"openshift_samples_retry_imagestream_import_total > 0\" }}\n   {{ .Labels.imagestreamname }}\n{{ end }}\n",
              "summary": "Samples operator is detecting problems with imagestream image imports"
            },
            "expr": "sum(openshift_samples_retry_imagestream_import_total) - sum(openshift_samples_retry_imagestream_import_total offset 30m) > sum(openshift_samples_failed_imagestream_import_info)",
            "for": "2h",
            "labels": {
              "namespace": "openshift-cluster-samples-operator",
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesDegraded",
            "annotations": {
              "description": "Samples could not be deployed and the operator is degraded. Review the \"openshift-samples\" ClusterOperator object for further details.\n",
              "summary": "Samples operator is degraded."
            },
            "expr": "openshift_samples_degraded_info == 1",
            "for": "2h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesInvalidConfig",
            "annotations": {
              "description": "Samples operator has been given an invalid configuration.\n",
              "summary": "Samples operator Invalid configuration"
            },
            "expr": "openshift_samples_invalidconfig_info == 1",
            "for": "2h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesMissingSecret",
            "annotations": {
              "description": "Samples operator cannot find the samples pull secret in the openshift namespace.\n",
              "summary": "Samples operator is not able to find secret"
            },
            "expr": "openshift_samples_invalidsecret_info{reason=\"missing_secret\"} == 1",
            "for": "2h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesMissingTBRCredential",
            "annotations": {
              "description": "The samples operator cannot find credentials for 'registry.redhat.io'. Many of the sample ImageStreams will fail to import unless the 'samplesRegistry' in the operator configuration is changed.\n",
              "summary": "Samples operator is not able to find the credentials for registry"
            },
            "expr": "openshift_samples_invalidsecret_info{reason=\"missing_tbr_credential\"} == 1",
            "for": "2h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "SamplesTBRInaccessibleOnBoot",
            "annotations": {
              "description": "One of two situations has occurred.  Either\nsamples operator could not access 'registry.redhat.io' during its initial installation and it bootstrapped as removed.\nIf this is expected, and stems from installing in a restricted network environment, please note that if you\nplan on mirroring images associated with sample imagestreams into a registry available in your restricted\nnetwork environment, and subsequently moving samples operator back to 'Managed' state, a list of the images\nassociated with each image stream tag from the samples catalog is\nprovided in the 'imagestreamtag-to-image' config map in the 'openshift-cluster-samples-operator' namespace to\nassist the mirroring process.\nOr, the use of allowed registries or blocked registries with global imagestream configuration will not allow\nsamples operator to create imagestreams using the default image registry 'registry.redhat.io'.\n",
              "summary": "Samples operator is not able to access the registry on boot"
            },
            "expr": "openshift_samples_tbr_inaccessible_info == 1",
            "for": "2d",
            "labels": {
              "severity": "info"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:29:58Z",
    "generation": 1,
    "labels": {
      "role": "alert-rules"
    },
    "name": "prometheus",
    "namespace": "openshift-cluster-storage-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "8883",
    "uid": "5e32b136-e268-43c4-9cf8-ad8d4bc4ad51"
  },
  "spec": {
    "groups": [
      {
        "name": "default-storage-classes.rules",
        "rules": [
          {
            "alert": "MultipleDefaultStorageClasses",
            "annotations": {
              "description": "Cluster storage operator monitors all storage classes configured in the cluster\nand checks there is not more than one default StorageClass configured.\n",
              "message": "StorageClass count check is failing (there should not be more than one default StorageClass)",
              "summary": "More than one default StorageClass detected."
            },
            "expr": "max_over_time(default_storage_class_count[5m]) > 1",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "kubernetes.io/description": "Alerting rules for when cluster-version operator metrics call for administrator attention."
    },
    "creationTimestamp": "2022-10-12T19:32:39Z",
    "generation": 1,
    "labels": {
      "k8s-app": "cluster-version-operator"
    },
    "name": "cluster-version-operator",
    "namespace": "openshift-cluster-version",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1641",
    "uid": "ac724372-89c6-4cdb-92e3-b2ec60f1b938"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-version",
        "rules": [
          {
            "alert": "ClusterVersionOperatorDown",
            "annotations": {
              "description": "The operator may be down or disabled. The cluster will not be kept up to date and upgrades will not be possible. Inspect the openshift-cluster-version namespace for events or changes to the cluster-version-operator deployment or pods to diagnose and repair. {{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} For more information refer to {{ label \"url\" (first $console_url ) }}/k8s/cluster/projects/openshift-cluster-version.{{ end }}{{ end }}",
              "summary": "Cluster version operator has disappeared from Prometheus target discovery."
            },
            "expr": "absent(up{job=\"cluster-version-operator\"} == 1)\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "CannotRetrieveUpdates",
            "annotations": {
              "description": "Failure to retrieve updates means that cluster administrators will need to monitor for available updates on their own or risk falling behind on security or other bugfixes. If the failure is expected, you can clear spec.channel in the ClusterVersion object to tell the cluster-version operator to not retrieve updates. Failure reason {{ with $cluster_operator_conditions := \"cluster_operator_conditions\" | query}}{{range $value := .}}{{if and (eq (label \"name\" $value) \"version\") (eq (label \"condition\" $value) \"RetrievedUpdates\") (eq (label \"endpoint\" $value) \"metrics\") (eq (value $value) 0.0)}}{{label \"reason\" $value}} {{end}}{{end}}{{end}}. {{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} For more information refer to {{ label \"url\" (first $console_url ) }}/settings/cluster/.{{ end }}{{ end }}",
              "summary": "Cluster version operator has not retrieved updates in {{ $value | humanizeDuration }}."
            },
            "expr": "(time()-cluster_version_operator_update_retrieval_timestamp_seconds) >= 3600 and ignoring(condition, name, reason) cluster_operator_conditions{name=\"version\", condition=\"RetrievedUpdates\", endpoint=\"metrics\", reason!=\"NoChannel\"}\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "UpdateAvailable",
            "annotations": {
              "description": "For more information refer to 'oc adm upgrade'{{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} or {{ label \"url\" (first $console_url ) }}/settings/cluster/{{ end }}{{ end }}.",
              "summary": "Your upstream update recommendation service recommends you update your cluster."
            },
            "expr": "sum by (channel,upstream) (cluster_version_available_updates) > 0\n",
            "labels": {
              "severity": "info"
            }
          }
        ]
      },
      {
        "name": "cluster-operators",
        "rules": [
          {
            "alert": "ClusterNotUpgradeable",
            "annotations": {
              "description": "In most cases, you will still be able to apply patch releases. Reason {{ with $cluster_operator_conditions := \"cluster_operator_conditions\" | query}}{{range $value := .}}{{if and (eq (label \"name\" $value) \"version\") (eq (label \"condition\" $value) \"Upgradeable\") (eq (label \"endpoint\" $value) \"metrics\") (eq (value $value) 0.0) (ne (len (label \"reason\" $value)) 0) }}{{label \"reason\" $value}}.{{end}}{{end}}{{end}} For more information refer to 'oc adm upgrade'{{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} or {{ label \"url\" (first $console_url ) }}/settings/cluster/{{ end }}{{ end }}.",
              "summary": "One or more cluster operators have been blocking minor version cluster upgrades for at least an hour."
            },
            "expr": "max by (name, condition, endpoint) (cluster_operator_conditions{name=\"version\", condition=\"Upgradeable\", endpoint=\"metrics\"} == 0)\n",
            "for": "60m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "ClusterOperatorDown",
            "annotations": {
              "description": "The {{ $labels.name }} operator may be down or disabled, and the components it manages may be unavailable or degraded.  Cluster upgrades may not complete. For more information refer to 'oc get -o yaml clusteroperator {{ $labels.name }}'{{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} or {{ label \"url\" (first $console_url ) }}/settings/cluster/{{ end }}{{ end }}.",
              "summary": "Cluster operator has not been available for 10 minutes."
            },
            "expr": "cluster_operator_up{job=\"cluster-version-operator\"} == 0\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "ClusterOperatorDegraded",
            "annotations": {
              "description": "The {{ $labels.name }} operator is degraded because {{ $labels.reason }}, and the components it manages may have reduced quality of service.  Cluster upgrades may not complete. For more information refer to 'oc get -o yaml clusteroperator {{ $labels.name }}'{{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} or {{ label \"url\" (first $console_url ) }}/settings/cluster/{{ end }}{{ end }}.",
              "summary": "Cluster operator has been degraded for 30 minutes."
            },
            "expr": "(\n  cluster_operator_conditions{job=\"cluster-version-operator\", condition=\"Degraded\"}\n  or on (name)\n  group by (name) (cluster_operator_up{job=\"cluster-version-operator\"})\n) == 1\n",
            "for": "30m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ClusterOperatorFlapping",
            "annotations": {
              "description": "The  {{ $labels.name }} operator behavior might cause upgrades to be unstable. For more information refer to 'oc get -o yaml clusteroperator {{ $labels.name }}'{{ with $console_url := \"console_url\" | query }}{{ if ne (len (label \"url\" (first $console_url ) ) ) 0}} or {{ label \"url\" (first $console_url ) }}/settings/cluster/{{ end }}{{ end }}.",
              "summary": "Cluster operator up status is changing often."
            },
            "expr": "changes(cluster_operator_up{job=\"cluster-version-operator\"}[2m]) > 2\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:40Z",
    "generation": 1,
    "labels": {
      "role": "alert-rules"
    },
    "name": "dns",
    "namespace": "openshift-dns-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1650",
    "uid": "1c5fe36e-37df-477b-8ce4-ecd035cb70c8"
  },
  "spec": {
    "groups": [
      {
        "name": "openshift-dns.rules",
        "rules": [
          {
            "alert": "CoreDNSPanicking",
            "annotations": {
              "description": "{{ $value }} CoreDNS panics observed on {{ $labels.instance }}",
              "summary": "CoreDNS panic"
            },
            "expr": "increase(coredns_panics_total[10m]) > 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CoreDNSHealthCheckSlow",
            "annotations": {
              "description": "CoreDNS Health Checks are slowing down (instance {{ $labels.instance }})",
              "summary": "CoreDNS health checks"
            },
            "expr": "histogram_quantile(.95, sum(rate(coredns_health_request_duration_seconds_bucket[5m])) by (instance, le)) > 10",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "CoreDNSErrorsHigh",
            "annotations": {
              "description": "CoreDNS is returning SERVFAIL for {{ $value | humanizePercentage }} of requests.",
              "summary": "CoreDNS serverfail"
            },
            "expr": "(sum by(namespace) (rate(coredns_dns_responses_total{rcode=\"SERVFAIL\"}[5m]))\n  /\nsum by(namespace) (rate(coredns_dns_responses_total[5m])))\n> 0.01\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:38Z",
    "generation": 1,
    "name": "etcd-prometheus-rules",
    "namespace": "openshift-etcd-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1615",
    "uid": "f2ab7479-0316-4420-9b9e-f0e64e62e81f"
  },
  "spec": {
    "groups": [
      {
        "name": "etcd",
        "rules": [
          {
            "alert": "etcdMembersDown",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": members are down ({{ $value }}).",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdMembersDown.md",
              "summary": "etcd cluster members are down."
            },
            "expr": "max without (endpoint) (\n  sum without (instance) (up{job=~\".*etcd.*\"} == bool 0)\nor\n  count without (To) (\n    sum without (instance) (rate(etcd_network_peer_sent_failures_total{job=~\".*etcd.*\"}[120s])) > 0.01\n  )\n)\n> 0\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdNoLeader",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": member {{ $labels.instance }} has no leader.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdNoLeader.md",
              "summary": "etcd cluster has no leader."
            },
            "expr": "etcd_server_has_leader{job=~\".*etcd.*\"} == 0\n",
            "for": "1m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdGRPCRequestsSlow",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": 99th percentile of gRPC requests is {{ $value }}s on etcd instance {{ $labels.instance }} for {{ $labels.grpc_method }} method.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdGRPCRequestsSlow.md",
              "summary": "etcd grpc requests are slow"
            },
            "expr": "histogram_quantile(0.99, sum(rate(grpc_server_handling_seconds_bucket{job=~\".*etcd.*\", grpc_method!=\"Defragment\", grpc_type=\"unary\"}[5m])) without(grpc_type))\n> 0.15\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdMemberCommunicationSlow",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": member communication with {{ $labels.To }} is taking {{ $value }}s on etcd instance {{ $labels.instance }}.",
              "summary": "etcd cluster member communication is slow."
            },
            "expr": "histogram_quantile(0.99, rate(etcd_network_peer_round_trip_time_seconds_bucket{job=~\".*etcd.*\"}[5m]))\n> 0.15\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdHighNumberOfFailedProposals",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": {{ $value }} proposal failures within the last 30 minutes on etcd instance {{ $labels.instance }}.",
              "summary": "etcd cluster has high number of proposal failures."
            },
            "expr": "rate(etcd_server_proposals_failed_total{job=~\".*etcd.*\"}[15m]) > 5\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdHighFsyncDurations",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": 99th percentile fsync durations are {{ $value }}s on etcd instance {{ $labels.instance }}.",
              "summary": "etcd cluster 99th percentile fsync durations are too high."
            },
            "expr": "histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=~\".*etcd.*\"}[5m]))\n> 0.5\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdHighFsyncDurations",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": 99th percentile fsync durations are {{ $value }}s on etcd instance {{ $labels.instance }}.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdHighFsyncDurations.md",
              "summary": "etcd cluster 99th percentile fsync durations are too high."
            },
            "expr": "histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=~\".*etcd.*\"}[5m]))\n> 1\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdHighCommitDurations",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": 99th percentile commit durations {{ $value }}s on etcd instance {{ $labels.instance }}.",
              "summary": "etcd cluster 99th percentile commit durations are too high."
            },
            "expr": "histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket{job=~\".*etcd.*\"}[5m]))\n> 0.25\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdBackendQuotaLowSpace",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": database size exceeds the defined quota on etcd instance {{ $labels.instance }}, please defrag or increase the quota as the writes to etcd will be disabled when it is full.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdBackendQuotaLowSpace.md",
              "summary": "etcd cluster database is running full."
            },
            "expr": "(etcd_mvcc_db_total_size_in_bytes/etcd_server_quota_backend_bytes)*100 > 95\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdExcessiveDatabaseGrowth",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": Observed surge in etcd writes leading to 50% increase in database size over the past four hours on etcd instance {{ $labels.instance }}, please check as it might be disruptive.",
              "summary": "etcd cluster database growing very fast."
            },
            "expr": "increase(((etcd_mvcc_db_total_size_in_bytes/etcd_server_quota_backend_bytes)*100)[240m:1m]) > 50\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "openshift-etcd.rules",
        "rules": [
          {
            "alert": "etcdHighNumberOfFailedGRPCRequests",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": {{ $value }}% of requests for {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}.",
              "summary": "etcd cluster has high number of failed grpc requests."
            },
            "expr": "(sum(rate(grpc_server_handled_total{job=\"etcd\", grpc_code=~\"Unknown|FailedPrecondition|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded\"}[5m])) without (grpc_type, grpc_code)\n  /\n(sum(rate(grpc_server_handled_total{job=\"etcd\"}[5m])) without (grpc_type, grpc_code)\n  > 2 and on ()(sum(cluster_infrastructure_provider{type!~\"ipi|BareMetal\"} == bool 1)))) * 100 > 10\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdHighNumberOfFailedGRPCRequests",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": {{ $value }}% of requests for {{ $labels.grpc_method }} failed on etcd instance {{ $labels.instance }}.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdHighNumberOfFailedGRPCRequests.md",
              "summary": "etcd cluster has high number of failed grpc requests."
            },
            "expr": "(sum(rate(grpc_server_handled_total{job=\"etcd\", grpc_code=~\"Unknown|FailedPrecondition|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded\"}[5m])) without (grpc_type, grpc_code)\n  /\n(sum(rate(grpc_server_handled_total{job=\"etcd\"}[5m])) without (grpc_type, grpc_code)\n  > 2 and on ()(sum(cluster_infrastructure_provider{type!~\"ipi|BareMetal\"} == bool 1)))) * 100 > 50\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "etcdHighNumberOfLeaderChanges",
            "annotations": {
              "description": "etcd cluster \"{{ $labels.job }}\": {{ $value }} average leader changes within the last 10 minutes. Frequent elections may be a sign of insufficient resources, high network latency, or disruptions by other components and should be investigated.",
              "summary": "etcd cluster has high number of leader changes."
            },
            "expr": "avg(changes(etcd_server_is_leader[10m])) > 5\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "etcdInsufficientMembers",
            "annotations": {
              "description": "etcd is reporting fewer instances are available than are needed ({{ $value }}). When etcd does not have a majority of instances available the Kubernetes and OpenShift APIs will reject read and write requests and operations that preserve the health of workloads cannot be performed. This can occur when multiple control plane nodes are powered off or are unable to connect to each other via the network. Check that all control plane nodes are powered on and that network connections between each machine are functional.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-etcd-operator/etcdInsufficientMembers.md",
              "summary": "etcd is reporting that a majority of instances are unavailable."
            },
            "expr": "sum(up{job=\"etcd\"} == bool 1 and etcd_server_has_leader{job=\"etcd\"} == bool 1) without (instance,pod) < ((count(up{job=\"etcd\"}) without (instance,pod) + 1) / 2)",
            "for": "3m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:33:39Z",
    "generation": 1,
    "name": "image-registry-rules",
    "namespace": "openshift-image-registry",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "11906",
    "uid": "0c615d56-9220-4ea8-ad2d-dab7001899bc"
  },
  "spec": {
    "groups": [
      {
        "name": "imageregistry.operations.rules",
        "rules": [
          {
            "expr": "label_replace(\n  label_replace(\n    sum by (operation) (imageregistry_request_duration_seconds_count{operation=\"BlobStore.ServeBlob\"}), \"operation\", \"get\", \"operation\", \"(.+)\"\n  ), \"resource_type\", \"blob\", \"resource_type\", \"\"\n)\n",
            "record": "imageregistry:operations_count:sum"
          },
          {
            "expr": "label_replace(\n  label_replace(\n    sum by (operation) (imageregistry_request_duration_seconds_count{operation=\"BlobStore.Create\"}), \"operation\", \"create\", \"operation\", \"(.+)\"\n  ), \"resource_type\", \"blob\", \"resource_type\", \"\"\n)\n",
            "record": "imageregistry:operations_count:sum"
          },
          {
            "expr": "label_replace(\n  label_replace(\n    sum by (operation) (imageregistry_request_duration_seconds_count{operation=\"ManifestService.Get\"}), \"operation\", \"get\", \"operation\", \"(.+)\"\n  ), \"resource_type\", \"manifest\", \"resource_type\", \"\"\n)\n",
            "record": "imageregistry:operations_count:sum"
          },
          {
            "expr": "label_replace(\n  label_replace(\n    sum by (operation) (imageregistry_request_duration_seconds_count{operation=\"ManifestService.Put\"}), \"operation\", \"create\", \"operation\", \"(.+)\"\n  ), \"resource_type\", \"manifest\", \"resource_type\", \"\"\n)\n",
            "record": "imageregistry:operations_count:sum"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:33:39Z",
    "generation": 1,
    "name": "imagestreams-rules",
    "namespace": "openshift-image-registry",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "11905",
    "uid": "433edb9f-45ec-48b4-9c12-fd95eb4cad3c"
  },
  "spec": {
    "groups": [
      {
        "name": "imagestreams.rules",
        "rules": [
          {
            "expr": "sum by (location, source) (image_registry_image_stream_tags_total)",
            "record": "imageregistry:imagestreamtags_count:sum"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:40Z",
    "generation": 1,
    "labels": {
      "role": "alert-rules"
    },
    "name": "ingress-operator",
    "namespace": "openshift-ingress-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1657",
    "uid": "77bc6ff6-39ce-4570-8b4f-d6cce57bdb4b"
  },
  "spec": {
    "groups": [
      {
        "name": "openshift-ingress.rules",
        "rules": [
          {
            "alert": "HAProxyReloadFail",
            "annotations": {
              "description": "This alert fires when HAProxy fails to reload its configuration, which will result in the router not picking up recently created or modified routes.",
              "message": "HAProxy reloads are failing on {{ $labels.pod }}. Router is not respecting recently created or modified routes",
              "summary": "HAProxy reload failure"
            },
            "expr": "template_router_reload_failure == 1",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "HAProxyDown",
            "annotations": {
              "description": "This alert fires when metrics report that HAProxy is down.",
              "message": "HAProxy metrics are reporting that HAProxy is down on pod {{ $labels.namespace }} / {{ $labels.pod }}",
              "summary": "HAProxy is down"
            },
            "expr": "haproxy_up == 0",
            "for": "5m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "IngressControllerDegraded",
            "annotations": {
              "description": "This alert fires when the IngressController status is degraded.",
              "message": "The {{ $labels.namespace }}/{{ $labels.name }} ingresscontroller is\ndegraded: {{ $labels.reason }}.\n",
              "summary": "IngressController is degraded"
            },
            "expr": "ingress_controller_conditions{condition=\"Degraded\"} == 1",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "IngressControllerUnavailable",
            "annotations": {
              "description": "This alert fires when the IngressController is not available.",
              "message": "The {{ $labels.namespace }}/{{ $labels.name }} ingresscontroller is\nunavailable: {{ $labels.reason }}.\n",
              "summary": "IngressController is unavailable"
            },
            "expr": "ingress_controller_conditions{condition=\"Available\"} == 0",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:30:11Z",
    "generation": 1,
    "name": "insights-prometheus-rules",
    "namespace": "openshift-insights",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "9213",
    "uid": "d59c17a6-2af3-4ece-9541-5e73f5a2a926"
  },
  "spec": {
    "groups": [
      {
        "name": "insights",
        "rules": [
          {
            "alert": "InsightsDisabled",
            "annotations": {
              "description": "Insights operator is disabled. In order to enable Insights and benefit from recommendations specific to your cluster, please follow steps listed in the documentation: https://docs.openshift.com/container-platform/latest/support/remote_health_monitoring/enabling-remote-health-reporting.html",
              "summary": "Insights operator is disabled."
            },
            "expr": "cluster_operator_conditions{name=\"insights\", condition=\"Disabled\"} == 1\n",
            "for": "5m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "SimpleContentAccessNotAvailable",
            "annotations": {
              "description": "Simple content access (SCA) is not enabled. Once enabled, Insights Operator can automatically import the SCA certificates from Red Hat OpenShift Cluster Manager making it easier to use the content provided by your Red Hat subscriptions when creating container images. See https://docs.openshift.com/container-platform/latest/cicd/builds/running-entitled-builds.html for more information.",
              "summary": "Simple content access certificates are not available."
            },
            "expr": "max_over_time(cluster_operator_conditions{name=\"insights\", condition=\"SCAAvailable\", reason=\"NotFound\"}[5m]) == 0\n",
            "for": "5m",
            "labels": {
              "severity": "info"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:39Z",
    "generation": 1,
    "name": "kube-apiserver-operator",
    "namespace": "openshift-kube-apiserver-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1647",
    "uid": "a3dd5a4d-f346-4416-a557-2b2dfe32426f"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-version",
        "rules": [
          {
            "alert": "TechPreviewNoUpgrade",
            "annotations": {
              "description": "Cluster has enabled Technology Preview features that cannot be undone and will prevent upgrades. The TechPreviewNoUpgrade feature set is not recommended on production clusters.",
              "summary": "Cluster has enabled tech preview features that will prevent upgrades."
            },
            "expr": "cluster_feature_set{name!=\"\", namespace=\"openshift-kube-apiserver-operator\"} == 0\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:30Z",
    "generation": 1,
    "name": "api-usage",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9753",
    "uid": "ab772852-8957-4ded-8e45-0043ddca0aeb"
  },
  "spec": {
    "groups": [
      {
        "name": "pre-release-lifecycle",
        "rules": [
          {
            "alert": "APIRemovedInNextReleaseInUse",
            "annotations": {
              "description": "Deprecated API that will be removed in the next version is being used. Removing the workload that is using the {{ $labels.group }}.{{ $labels.version }}/{{ $labels.resource }} API might be necessary for a successful upgrade to the next cluster version. Refer to `oc get apirequestcounts {{ $labels.resource }}.{{ $labels.version }}.{{ $labels.group }} -o yaml` to identify the workload.",
              "summary": "Deprecated API that will be removed in the next version is being used."
            },
            "expr": "group(apiserver_requested_deprecated_apis{removed_release=\"1.25\"}) by (group,version,resource) and (sum by(group,version,resource) (rate(apiserver_request_total{system_client!=\"kube-controller-manager\",system_client!=\"cluster-policy-controller\"}[4h]))) > 0\n",
            "for": "1h",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "info"
            }
          },
          {
            "alert": "APIRemovedInNextEUSReleaseInUse",
            "annotations": {
              "description": "Deprecated API that will be removed in the next EUS version is being used. Removing the workload that is using the {{ $labels.group }}.{{ $labels.version }}/{{ $labels.resource }} API might be necessary for a successful upgrade to the next EUS cluster version. Refer to `oc get apirequestcounts {{ $labels.resource }}.{{ $labels.version }}.{{ $labels.group }} -o yaml` to identify the workload.",
              "summary": "Deprecated API that will be removed in the next EUS version is being used."
            },
            "expr": "group(apiserver_requested_deprecated_apis{removed_release=~\"1\\\\.2[5]\"}) by (group,version,resource) and (sum by(group,version,resource) (rate(apiserver_request_total{system_client!=\"kube-controller-manager\",system_client!=\"cluster-policy-controller\"}[4h]))) > 0\n",
            "for": "1h",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "info"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:31Z",
    "generation": 1,
    "name": "audit-errors",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9758",
    "uid": "d0130e92-e38f-4a27-a1c9-5c8bc927861a"
  },
  "spec": {
    "groups": [
      {
        "name": "apiserver-audit",
        "rules": [
          {
            "alert": "AuditLogError",
            "annotations": {
              "description": "An API Server had an error writing to an audit log.",
              "summary": "An API Server instance was unable to write audit logs. This could be\ntriggered by the node running out of space, or a malicious actor\ntampering with the audit logs."
            },
            "expr": "sum by (apiserver,instance)(rate(apiserver_audit_error_total{apiserver=~\".+-apiserver\"}[5m])) / sum by (apiserver,instance) (rate(apiserver_audit_event_total{apiserver=~\".+-apiserver\"}[5m])) > 0\n",
            "for": "1m",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:31Z",
    "generation": 1,
    "name": "cpu-utilization",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9777",
    "uid": "a184083e-a203-417d-b0c0-e56a03ecb94d"
  },
  "spec": {
    "groups": [
      {
        "name": "control-plane-cpu-utilization",
        "rules": [
          {
            "alert": "HighOverallControlPlaneCPU",
            "annotations": {
              "description": "Given three control plane nodes, the overall CPU utilization may only be about 2/3 of all available capacity. This is because if a single control plane node fails, the remaining two must handle the load of the cluster in order to be HA. If the cluster is using more than 2/3 of all capacity, if one control plane node fails, the remaining two are likely to fail when they take the load. To fix this, increase the CPU and memory on your control plane nodes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md",
              "summary": "CPU utilization across all three control plane nodes is higher than two control plane nodes can sustain; a single control plane node outage may cause a cascading failure; increase available CPU."
            },
            "expr": "sum(\n  100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m])) * 100)\n  AND on (instance) label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n)\n/\ncount(kube_node_role{role=\"master\"})\n> 60\n",
            "for": "10m",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "warning"
            }
          },
          {
            "alert": "ExtremelyHighIndividualControlPlaneCPU",
            "annotations": {
              "description": "Extreme CPU pressure can cause slow serialization and poor performance from the kube-apiserver and etcd. When this happens, there is a risk of clients seeing non-responsive API requests which are issued again causing even more CPU pressure. It can also cause failing liveness probes due to slow etcd responsiveness on the backend. If one kube-apiserver fails under this condition, chances are you will experience a cascade as the remaining kube-apiservers are also under-provisioned. To fix this, increase the CPU and memory on your control plane nodes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md",
              "summary": "CPU utilization on a single control plane node is very high, more CPU pressure is likely to cause a failover; increase available CPU."
            },
            "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m])) * 100) > 90 AND on (instance) label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n",
            "for": "5m",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "warning"
            }
          },
          {
            "alert": "ExtremelyHighIndividualControlPlaneCPU",
            "annotations": {
              "description": "Extreme CPU pressure can cause slow serialization and poor performance from the kube-apiserver and etcd. When this happens, there is a risk of clients seeing non-responsive API requests which are issued again causing even more CPU pressure. It can also cause failing liveness probes due to slow etcd responsiveness on the backend. If one kube-apiserver fails under this condition, chances are you will experience a cascade as the remaining kube-apiservers are also under-provisioned. To fix this, increase the CPU and memory on your control plane nodes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md",
              "summary": "Sustained high CPU utilization on a single control plane node, more CPU pressure is likely to cause a failover; increase available CPU."
            },
            "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[1m])) * 100) > 90 AND on (instance) label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n",
            "for": "1h",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:31Z",
    "generation": 1,
    "name": "kube-apiserver-requests",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9781",
    "uid": "3662cf03-80f3-4ace-9926-760b63317ba2"
  },
  "spec": {
    "groups": [
      {
        "name": "apiserver-requests-in-flight",
        "rules": [
          {
            "expr": "max_over_time(sum(apiserver_current_inflight_requests{apiserver=~\"openshift-apiserver|kube-apiserver\"}) by (apiserver,requestKind)[2m:])\n",
            "record": "cluster:apiserver_current_inflight_requests:sum:max_over_time:2m"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:32Z",
    "generation": 1,
    "name": "kube-apiserver-slos-basic",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9787",
    "uid": "015cc70f-9017-4465-aa13-3bbea6effd35"
  },
  "spec": {
    "groups": [
      {
        "name": "kube-apiserver-slos-basic",
        "rules": [
          {
            "alert": "KubeAPIErrorBudgetBurn",
            "annotations": {
              "description": "The API server is burning too much error budget. This alert fires when too many requests are failing with high latency. Use the 'API Performance' monitoring dashboards to narrow down the request states and latency. The 'etcd' monitoring dashboards also provides metrics to help determine etcd stability and performance.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/KubeAPIErrorBudgetBurn.md",
              "summary": "The API server is burning too much error budget."
            },
            "expr": "sum(apiserver_request:burnrate1h) > (14.40 * 0.01000)\nand\nsum(apiserver_request:burnrate5m) > (14.40 * 0.01000)\n",
            "for": "2m",
            "labels": {
              "long": "1h",
              "namespace": "openshift-kube-apiserver",
              "severity": "critical",
              "short": "5m"
            }
          },
          {
            "alert": "KubeAPIErrorBudgetBurn",
            "annotations": {
              "description": "The API server is burning too much error budget. This alert fires when too many requests are failing with high latency. Use the 'API Performance' monitoring dashboards to narrow down the request states and latency. The 'etcd' monitoring dashboards also provides metrics to help determine etcd stability and performance.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/KubeAPIErrorBudgetBurn.md",
              "summary": "The API server is burning too much error budget."
            },
            "expr": "sum(apiserver_request:burnrate6h) > (6.00 * 0.01000)\nand\nsum(apiserver_request:burnrate30m) > (6.00 * 0.01000)\n",
            "for": "15m",
            "labels": {
              "long": "6h",
              "namespace": "openshift-kube-apiserver",
              "severity": "critical",
              "short": "30m"
            }
          }
        ]
      },
      {
        "name": "kube-apiserver.rules",
        "rules": [
          {
            "expr": "# error\nlabel_replace(\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",code=~\"5..\"}[5m]))\n/ scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[5m])))\n, \"type\", \"error\", \"_none_\", \"\")\nor\n# resource-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\"}[5m]))\n  -\n    (sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\",le=\"1\"}[5m])) or vector(0))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[5m])))\n, \"type\", \"slow-resource\", \"_none_\", \"\")\nor\n# namespace-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\"}[5m]))\n  - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\",le=\"5\"}[5m]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[5m])))\n, \"type\", \"slow-namespace\", \"_none_\", \"\")\nor\n# cluster-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\"}[5m]))\n    - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\",le=\"30\"}[5m]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[5m])))\n, \"type\", \"slow-cluster\", \"_none_\", \"\")\n",
            "labels": {
              "verb": "read"
            },
            "record": "apiserver_request:burnrate5m"
          },
          {
            "expr": "# error\nlabel_replace(\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",code=~\"5..\"}[30m]))\n/ scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[30m])))\n, \"type\", \"error\", \"_none_\", \"\")\nor\n# resource-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\"}[30m]))\n  -\n    (sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\",le=\"1\"}[30m])) or vector(0))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[30m])))\n, \"type\", \"slow-resource\", \"_none_\", \"\")\nor\n# namespace-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\"}[30m]))\n  - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\",le=\"5\"}[30m]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[30m])))\n, \"type\", \"slow-namespace\", \"_none_\", \"\")\nor\n# cluster-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\"}[30m]))\n    - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\",le=\"30\"}[30m]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[30m])))\n, \"type\", \"slow-cluster\", \"_none_\", \"\")\n",
            "labels": {
              "verb": "read"
            },
            "record": "apiserver_request:burnrate30m"
          },
          {
            "expr": "# error\nlabel_replace(\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",code=~\"5..\"}[1h]))\n/ scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[1h])))\n, \"type\", \"error\", \"_none_\", \"\")\nor\n# resource-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\"}[1h]))\n  -\n    (sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\",le=\"1\"}[1h])) or vector(0))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[1h])))\n, \"type\", \"slow-resource\", \"_none_\", \"\")\nor\n# namespace-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\"}[1h]))\n  - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\",le=\"5\"}[1h]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[1h])))\n, \"type\", \"slow-namespace\", \"_none_\", \"\")\nor\n# cluster-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\"}[1h]))\n    - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\",le=\"30\"}[1h]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[1h])))\n, \"type\", \"slow-cluster\", \"_none_\", \"\")\n",
            "labels": {
              "verb": "read"
            },
            "record": "apiserver_request:burnrate1h"
          },
          {
            "expr": "# error\nlabel_replace(\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",code=~\"5..\"}[6h]))\n/ scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[6h])))\n, \"type\", \"error\", \"_none_\", \"\")\nor\n# resource-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\"}[6h]))\n  -\n    (sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"resource\",le=\"1\"}[6h])) or vector(0))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[6h])))\n, \"type\", \"slow-resource\", \"_none_\", \"\")\nor\n# namespace-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\"}[6h]))\n  - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\",scope=\"namespace\",le=\"5\"}[6h]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\",subresource!~\"proxy|log|exec\"}[6h])))\n, \"type\", \"slow-namespace\", \"_none_\", \"\")\nor\n# cluster-scoped latency\nlabel_replace(\n  (\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\"}[6h]))\n    - sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\",scope=\"cluster\",le=\"30\"}[6h]))\n  ) / scalar(sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[6h])))\n, \"type\", \"slow-cluster\", \"_none_\", \"\")\n",
            "labels": {
              "verb": "read"
            },
            "record": "apiserver_request:burnrate6h"
          },
          {
            "expr": "(\n  (\n    # too slow\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[1h]))\n    -\n    sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",le=\"1\"}[1h]))\n  )\n  +\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",code=~\"5..\"}[1h]))\n)\n/\nsum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[1h]))\n",
            "labels": {
              "verb": "write"
            },
            "record": "apiserver_request:burnrate1h"
          },
          {
            "expr": "(\n  (\n    # too slow\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[30m]))\n    -\n    sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",le=\"1\"}[30m]))\n  )\n  +\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",code=~\"5..\"}[30m]))\n)\n/\nsum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[30m]))\n",
            "labels": {
              "verb": "write"
            },
            "record": "apiserver_request:burnrate30m"
          },
          {
            "expr": "(\n  (\n    # too slow\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[5m]))\n    -\n    sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",le=\"1\"}[5m]))\n  )\n  +\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",code=~\"5..\"}[5m]))\n)\n/\nsum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[5m]))\n",
            "labels": {
              "verb": "write"
            },
            "record": "apiserver_request:burnrate5m"
          },
          {
            "expr": "(\n  (\n    # too slow\n    sum(rate(apiserver_request_duration_seconds_count{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[6h]))\n    -\n    sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",le=\"1\"}[6h]))\n  )\n  +\n  sum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\",code=~\"5..\"}[6h]))\n)\n/\nsum(rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[6h]))\n",
            "labels": {
              "verb": "write"
            },
            "record": "apiserver_request:burnrate6h"
          },
          {
            "expr": "sum by (code,resource) (rate(apiserver_request_total{job=\"apiserver\",verb=~\"LIST|GET\"}[5m]))\n",
            "labels": {
              "verb": "read"
            },
            "record": "code_resource:apiserver_request_total:rate5m"
          },
          {
            "expr": "sum by (code,resource) (rate(apiserver_request_total{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[5m]))\n",
            "labels": {
              "verb": "write"
            },
            "record": "code_resource:apiserver_request_total:rate5m"
          },
          {
            "expr": "histogram_quantile(0.99, sum by (le, resource) (rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"LIST|GET\"}[5m]))) > 0\n",
            "labels": {
              "quantile": "0.99",
              "verb": "read"
            },
            "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.99, sum by (le, resource) (rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",verb=~\"POST|PUT|PATCH|DELETE\"}[5m]))) > 0\n",
            "labels": {
              "quantile": "0.99",
              "verb": "write"
            },
            "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|DELETECOLLECTION|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.99"
            },
            "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.9, sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|DELETECOLLECTION|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.9"
            },
            "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.5, sum(rate(apiserver_request_duration_seconds_bucket{job=\"apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|DELETECOLLECTION|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.5"
            },
            "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:32Z",
    "generation": 1,
    "name": "podsecurity",
    "namespace": "openshift-kube-apiserver",
    "resourceVersion": "9795",
    "uid": "5225ba73-76fe-47f8-aae9-f67dd1a9f982"
  },
  "spec": {
    "groups": [
      {
        "name": "pod-security-violation",
        "rules": [
          {
            "alert": "PodSecurityViolation",
            "annotations": {
              "description": "A workload (pod, deployment, deamonset, ...) was created somewhere in the cluster but it did not match the PodSecurity \"{{ $labels.policy_level }}\" profile defined by its namespace either via the cluster-wide configuration (which triggers on a \"restricted\" profile violations) or by the namespace local Pod Security labels. Refer to Kubernetes documentation on Pod Security Admission to learn more about these violations.",
              "summary": "One or more workloads users created in the cluster don't match their Pod Security profile"
            },
            "expr": "sum(increase(pod_security_evaluations_total{decision=\"deny\",mode=\"audit\",resource=\"pod\"}[1d])) by (policy_level) > 0\n",
            "labels": {
              "namespace": "openshift-kube-apiserver",
              "severity": "info"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:45Z",
    "generation": 1,
    "name": "kube-controller-manager-operator",
    "namespace": "openshift-kube-controller-manager-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1779",
    "uid": "f180f9b0-245f-476a-8e96-a86777b6ffc0"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-version",
        "rules": [
          {
            "alert": "KubeControllerManagerDown",
            "annotations": {
              "description": "KubeControllerManager has disappeared from Prometheus target discovery.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-controller-manager-operator/KubeControllerManagerDown.md",
              "summary": "Target disappeared from Prometheus target discovery."
            },
            "expr": "absent(up{job=\"kube-controller-manager\"} == 1)\n",
            "for": "15m",
            "labels": {
              "namespace": "openshift-kube-controller-manager",
              "severity": "critical"
            }
          },
          {
            "alert": "PodDisruptionBudgetAtLimit",
            "annotations": {
              "description": "The pod disruption budget is at the minimum disruptions allowed level. The number of current healthy pods is equal to the desired healthy pods.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-controller-manager-operator/PodDisruptionBudgetAtLimit.md",
              "summary": "The pod disruption budget is preventing further disruption to pods."
            },
            "expr": "max by(namespace, poddisruptionbudget) (kube_poddisruptionbudget_status_current_healthy == kube_poddisruptionbudget_status_desired_healthy and on (namespace, poddisruptionbudget) kube_poddisruptionbudget_status_expected_pods > 0)\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PodDisruptionBudgetLimit",
            "annotations": {
              "description": "The pod disruption budget is below the minimum disruptions allowed level and is not satisfied. The number of current healthy pods is less than the desired healthy pods.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-controller-manager-operator/PodDisruptionBudgetLimit.md",
              "summary": "The pod disruption budget registers insufficient amount of pods."
            },
            "expr": "max by (namespace, poddisruptionbudget) (kube_poddisruptionbudget_status_current_healthy < kube_poddisruptionbudget_status_desired_healthy)\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "GarbageCollectorSyncFailed",
            "annotations": {
              "description": "Garbage Collector had a problem with syncing and monitoring the available resources. Please see KubeControllerManager logs for more details.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-controller-manager-operator/GarbageCollectorSyncFailed.md",
              "summary": "There was a problem with syncing the resources for garbage collection."
            },
            "expr": "rate(garbagecollector_controller_resources_sync_error_total{}[5m]) > 0\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:39Z",
    "generation": 1,
    "name": "kube-scheduler-operator",
    "namespace": "openshift-kube-scheduler-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1649",
    "uid": "f2dd007e-e979-4c89-8495-b78a112b8887"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-version",
        "rules": [
          {
            "alert": "KubeSchedulerDown",
            "annotations": {
              "description": "KubeScheduler has disappeared from Prometheus target discovery.",
              "summary": "Target disappeared from Prometheus target discovery."
            },
            "expr": "absent(up{job=\"scheduler\"} == 1)\n",
            "for": "15m",
            "labels": {
              "namespace": "openshift-kube-scheduler",
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "scheduler-legacy-policy-deprecated",
        "rules": [
          {
            "alert": "SchedulerLegacyPolicySet",
            "annotations": {
              "description": "The scheduler is currently configured to use a legacy scheduler policy API. Use of the policy API is deprecated and removed in 4.10.",
              "summary": "Legacy scheduler policy API in use by the scheduler."
            },
            "expr": "cluster_legacy_scheduler_policy > 0\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-18T20:09:22Z",
    "generation": 1,
    "name": "collector",
    "namespace": "openshift-logging",
    "ownerReferences": [
      {
        "apiVersion": "logging.openshift.io/v1",
        "controller": true,
        "kind": "ClusterLogging",
        "name": "instance",
        "uid": "8245903f-82fb-40e5-8ac4-20ca522b11fb"
      }
    ],
    "resourceVersion": "1691421",
    "uid": "54c683df-8850-488a-b04e-07cc401be832"
  },
  "spec": {
    "groups": [
      {
        "name": "logging_fluentd.alerts",
        "rules": [
          {
            "alert": "FluentdNodeDown",
            "annotations": {
              "message": "Prometheus could not scrape fluentd {{ $labels.instance }} for more than 10m.",
              "summary": "Fluentd cannot be scraped"
            },
            "expr": "up{job=\"collector\"} == 0 or absent(up{job=\"collector\"}) == 1\n",
            "for": "10m",
            "labels": {
              "namespace": "openshift-logging",
              "service": "fluentd",
              "severity": "critical"
            }
          },
          {
            "alert": "FluentdQueueLengthIncreasing",
            "annotations": {
              "message": "For the last hour, fluentd {{ $labels.instance }} output '{{ $labels.plugin_id }}' average buffer queue length has increased continuously.",
              "summary": "Fluentd is unable to keep up with traffic over time for forwarder output {{ $labels.plugin_id }}."
            },
            "expr": "( 0 * (deriv(fluentd_output_status_emit_records[1m] offset 1h)))  + on(pod,plugin_id)  ( deriv(fluentd_output_status_buffer_queue_length[10m]) > 0 and delta(fluentd_output_status_buffer_queue_length[1h]) > 1 )\n",
            "for": "1h",
            "labels": {
              "namespace": "openshift-logging",
              "service": "fluentd",
              "severity": "Warning"
            }
          },
          {
            "alert": "FluentDHighErrorRate",
            "annotations": {
              "message": "{{ $value }}% of records have resulted in an error by fluentd {{ $labels.instance }}.",
              "summary": "FluentD output errors are high"
            },
            "expr": "100 * (\n  sum by(instance)(rate(fluentd_output_status_num_errors[2m]))\n/\n  sum by(instance)(rate(fluentd_output_status_emit_records[2m]))\n) > 10\n",
            "for": "15m",
            "labels": {
              "namespace": "openshift-logging",
              "severity": "warning"
            }
          },
          {
            "alert": "FluentDVeryHighErrorRate",
            "annotations": {
              "message": "{{ $value }}% of records have resulted in an error by fluentd {{ $labels.instance }}.",
              "summary": "FluentD output errors are very high"
            },
            "expr": "100 * (\n  sum by(instance)(rate(fluentd_output_status_num_errors[2m]))\n/\n  sum by(instance)(rate(fluentd_output_status_emit_records[2m]))\n) > 25\n",
            "for": "15m",
            "labels": {
              "namespace": "openshift-logging",
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "logging_clusterlogging_telemetry.rules",
        "rules": [
          {
            "expr": "sum by(cluster)(log_collected_bytes_total)\n",
            "record": "cluster:log_collected_bytes_total:sum"
          },
          {
            "expr": "sum by(cluster)(log_logged_bytes_total)\n",
            "record": "cluster:log_logged_bytes_total:sum"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-18T19:53:28Z",
    "generation": 1,
    "name": "logging-loki-prometheus-rule",
    "namespace": "openshift-logging",
    "ownerReferences": [
      {
        "apiVersion": "loki.grafana.com/v1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "LokiStack",
        "name": "logging-loki",
        "uid": "826d9c77-7ff7-4d8d-ba9a-6cd0011d3ca5"
      }
    ],
    "resourceVersion": "1687306",
    "uid": "3a44158f-bd36-40e1-9d2a-bd13a5cb0abc"
  },
  "spec": {
    "groups": [
      {
        "name": "logging_loki.alerts",
        "rules": [
          {
            "alert": "LokiRequestErrors",
            "annotations": {
              "message": "{{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}% errors.",
              "runbook_url": "https://github.com/grafana/loki/blob/main/operator/docs/lokistack/sop.md#Loki-Request-Errors",
              "summary": "At least 10% of requests are responded by 5xx server errors."
            },
            "expr": "sum(\n  rate(\n    loki_request_duration_seconds_count{status_code=~\"5..\"}[1m]\n  )\n) by (namespace, job, route)\n/\nsum(\n  rate(\n    loki_request_duration_seconds_count[1m]\n  )\n) by (namespace, job, route)\n* 100\n> 10\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "LokiStackWriteRequestErrors",
            "annotations": {
              "message": "{{ printf \"%.2f\" $value }}% of write requests from {{ $labels.job }} are returned with server errors.",
              "runbook_url": "https://github.com/grafana/loki/blob/main/operator/docs/lokistack/sop.md#LokiStack-Write-Request-Errors",
              "summary": "At least 10% of write requests to the lokistack-gateway are responded with 5xx server errors."
            },
            "expr": "sum(\n  rate(\n    http_requests_total{code=~\"5..\", group=\"logsv1\", handler=\"push\"}[1m]\n  )\n) by (namespace, job, tenant)\n/\nsum(\n  rate(\n    http_requests_total{group=\"logsv1\", handler=\"push\"}[1m]\n  )\n) by (namespace, job, tenant)\n* 100\n> 10\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "LokiStackReadRequestErrors",
            "annotations": {
              "message": "{{ printf \"%.2f\" $value }}% of query requests from {{ $labels.job }} are returned with server errors.",
              "runbook_url": "https://github.com/grafana/loki/blob/main/operator/docs/lokistack/sop.md#LokiStack-Read-Request-Errors",
              "summary": "At least 10% of query requests to the lokistack-gateway are responded with 5xx server errors."
            },
            "expr": "sum(\n  rate(\n    http_requests_total{code=~\"5..\", group=\"logsv1\", handler=~\"query|query_range|label|labels|label_values\"}[1m]\n  )\n) by (namespace, job, tenant)\n/\nsum(\n  rate(\n    http_requests_total{group=\"logsv1\", handler=~\"query|query_range|label|labels|label_values\"}[1m]\n  )\n) by (namespace, job, tenant)\n* 100\n> 10\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "LokiRequestPanics",
            "annotations": {
              "message": "{{ $labels.job }} is experiencing an increase of {{ $value }} panics.",
              "runbook_url": "https://github.com/grafana/loki/blob/main/operator/docs/lokistack/sop.md#Loki-Request-Panics",
              "summary": "A panic was triggered."
            },
            "expr": "sum(\n  increase(\n    loki_panic_total[10m]\n  )\n) by (namespace, job)\n> 0\n",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "exclude.release.openshift.io/internal-openshift-hosted": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:28:59Z",
    "generation": 1,
    "labels": {
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "machine-api-operator-prometheus-rules",
    "namespace": "openshift-machine-api",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "8089",
    "uid": "b6b1243b-28c7-4de5-83a2-a6292b5e9fbe"
  },
  "spec": {
    "groups": [
      {
        "name": "machine-without-valid-node-ref",
        "rules": [
          {
            "alert": "MachineWithoutValidNode",
            "annotations": {
              "description": "If the machine never became a node, you should diagnose the machine related failures.\nIf the node was deleted from the API, you may delete the machine if appropriate.\n",
              "summary": "machine {{ $labels.name }} does not have valid node reference"
            },
            "expr": "sum by (name, namespace) (mapi_machine_created_timestamp_seconds unless on(node) kube_node_info) > 0\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "machine-with-no-running-phase",
        "rules": [
          {
            "alert": "MachineWithNoRunningPhase",
            "annotations": {
              "description": "The machine has been without a Running or Deleting phase for more than 60 minutes.\nThe machine may not have been provisioned properly from the infrastructure provider, or\nit might have issues with CertificateSigningRequests being approved.\n",
              "summary": "machine {{ $labels.name }} is in phase: {{ $labels.phase }}"
            },
            "expr": "sum by (name, namespace) (mapi_machine_created_timestamp_seconds{phase!~\"Running|Deleting\"}) > 0\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "machine-not-yet-deleted",
        "rules": [
          {
            "alert": "MachineNotYetDeleted",
            "annotations": {
              "description": "The machine is not properly deleting, this may be due to a configuration issue with the\ninfrastructure provider, or because workloads on the node have PodDisruptionBudgets or\nlong termination periods which are preventing deletion.\n",
              "summary": "machine {{ $labels.name }} has been in Deleting phase for more than 6 hours"
            },
            "expr": "sum by (name, namespace) (avg_over_time(mapi_machine_created_timestamp_seconds{phase=\"Deleting\"}[15m])) > 0\n",
            "for": "360m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "machine-api-operator-metrics-collector-up",
        "rules": [
          {
            "alert": "MachineAPIOperatorMetricsCollectionFailing",
            "annotations": {
              "description": "For more details:  oc logs <machine-api-operator-pod-name> -n openshift-machine-api",
              "summary": "machine api operator metrics collection is failing."
            },
            "expr": "mapi_mao_collector_up == 0\n",
            "for": "5m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "machine-health-check-unterminated-short-circuit",
        "rules": [
          {
            "alert": "MachineHealthCheckUnterminatedShortCircuit",
            "annotations": {
              "description": "The number of unhealthy machines has exceeded the `maxUnhealthy` limit for the check, you should check\nthe status of machines in the cluster.\n",
              "summary": "machine health check {{ $labels.name }} has been disabled by short circuit for more than 30 minutes"
            },
            "expr": "mapi_machinehealthcheck_short_circuit == 1\n",
            "for": "30m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:44Z",
    "generation": 1,
    "labels": {
      "k8s-app": "machine-config-controller"
    },
    "name": "machine-config-controller",
    "namespace": "openshift-machine-config-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1747",
    "uid": "f074b3cb-da37-4089-b41d-57cc70e07667"
  },
  "spec": {
    "groups": [
      {
        "name": "mcc-paused-pool-kubelet-ca",
        "rules": [
          {
            "alert": "MachineConfigControllerPausedPoolKubeletCA",
            "annotations": {
              "description": "Machine config pools have a 'pause' feature, which allows config to be rendered, but prevents it from being rolled out to the nodes. This alert indicates that a certificate rotation has taken place, and the new kubelet-ca certificate bundle has been rendered into a machine config, but because the pool '{{$labels.pool}}' is paused, the config cannot be rolled out to the nodes in that pool. You will notice almost immediately that for nodes in pool '{{$labels.pool}}', pod logs will not be visible in the console and interactive commands (oc log, oc exec, oc debug, oc attach) will not work. You must unpause machine config pool '{{$labels.pool}}' to let the certificates through before the kube-apiserver-to-kubelet-signer certificate expires on {{ $value | humanizeTimestamp }} or this pool's nodes will cease to function properly.",
              "runbook_url": "https://github.com/openshift/blob/master/alerts/machine-config-operator/MachineConfigControllerPausedPoolKubeletCA.md",
              "summary": "Paused machine configuration pool '{{$labels.pool}}' is blocking a necessary certificate rotation and must be unpaused before the current kube-apiserver-to-kubelet-signer certificate expires on {{ $value | humanizeTimestamp }}."
            },
            "expr": "max by (namespace,pool) (last_over_time(machine_config_controller_paused_pool_kubelet_ca[5m])) > 0\n",
            "for": "60m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "MachineConfigControllerPausedPoolKubeletCA",
            "annotations": {
              "description": "Machine config pools have a 'pause' feature, which allows config to be rendered, but prevents it from being rolled out to the nodes. This alert indicates that a certificate rotation has taken place, and the new kubelet-ca certificate bundle has been rendered into a machine config, but because the pool '{{$labels.pool}}' is paused, the config cannot be rolled out to the nodes in that pool. You will notice almost immediately that for nodes in pool '{{$labels.pool}}', pod logs will not be visible in the console and interactive commands (oc log, oc exec, oc debug, oc attach) will not work. You must unpause machine config pool '{{$labels.pool}}' to let the certificates through before the kube-apiserver-to-kubelet-signer certificate expires. You have approximately {{ $value | humanizeDuration }} remaining before this happens and nodes in '{{$labels.pool}}' cease to function properly.",
              "runbook_url": "https://github.com/openshift/blob/master/alerts/machine-config-operator/MachineConfigControllerPausedPoolKubeletCA.md",
              "summary": "Paused machine configuration pool '{{$labels.pool}}' is blocking a necessary certificate rotation and must be unpaused before the current kube-apiserver-to-kubelet-signer certificate expires in {{ $value | humanizeDuration }}."
            },
            "expr": "max by (namespace,pool) (last_over_time(machine_config_controller_paused_pool_kubelet_ca[5m]) - time()) < (86400 * 14) AND max by (namespace,pool) (last_over_time(machine_config_controller_paused_pool_kubelet_ca[5m])) > 0\n",
            "for": "60m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:45Z",
    "generation": 1,
    "labels": {
      "k8s-app": "machine-config-daemon"
    },
    "name": "machine-config-daemon",
    "namespace": "openshift-machine-config-operator",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1778",
    "uid": "4dc0ed34-952f-40d7-ba3b-21b3d2c0b044"
  },
  "spec": {
    "groups": [
      {
        "name": "mcd-reboot-error",
        "rules": [
          {
            "alert": "MCDRebootError",
            "annotations": {
              "message": "Reboot failed on {{ $labels.node }} , update may be blocked"
            },
            "expr": "mcd_reboot_err > 0\n",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "mcd-drain-error",
        "rules": [
          {
            "alert": "MCDDrainError",
            "annotations": {
              "message": "Drain failed on {{ $labels.node }} , updates may be blocked. For more details check MachineConfigController pod logs: oc logs -f -n {{ $labels.namespace }} machine-config-controller-xxxxx -c machine-config-controller"
            },
            "expr": "mcd_drain_err > 0\n",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "mcd-pivot-error",
        "rules": [
          {
            "alert": "MCDPivotError",
            "annotations": {
              "message": "Error detected in pivot logs on {{ $labels.node }} "
            },
            "expr": "mcd_pivot_err > 0\n",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "mcd-kubelet-health-state-error",
        "rules": [
          {
            "alert": "KubeletHealthState",
            "annotations": {
              "message": "Kubelet health failure threshold reached"
            },
            "expr": "mcd_kubelet_state > 2\n",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "system-memory-exceeds-reservation",
        "rules": [
          {
            "alert": "SystemMemoryExceedsReservation",
            "annotations": {
              "message": "System memory usage of {{ $value | humanize }} on {{ $labels.node }} exceeds 95% of the reservation. Reserved memory ensures system processes can function even when the node is fully allocated and protects against workload out of memory events impacting the proper functioning of the node. The default reservation is expected to be sufficient for most configurations and should be increased (https://docs.openshift.com/container-platform/latest/nodes/nodes/nodes-nodes-managing.html) when running nodes with high numbers of pods (either due to rate of change or at steady state)."
            },
            "expr": "sum by (node) (container_memory_rss{id=\"/system.slice\"}) > ((sum by (node) (kube_node_status_capacity{resource=\"memory\"} - kube_node_status_allocatable{resource=\"memory\"})) * 0.95)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "high-overall-control-plane-memory",
        "rules": [
          {
            "alert": "HighOverallControlPlaneMemory",
            "annotations": {
              "description": "Given three control plane nodes, the overall memory utilization may only be about 2/3 of all available capacity. This is because if a single control plane node fails, the kube-apiserver and etcd my be slow to respond. To fix this, increase memory of the control plane nodes.",
              "summary": "Memory utilization across all control plane nodes is high, and could impact responsiveness and stability."
            },
            "expr": "(\n  1\n  -\n  sum (\n    node_memory_MemFree_bytes\n    + node_memory_Buffers_bytes\n    + node_memory_Cached_bytes\n    AND on (instance)\n    label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n  ) / sum (\n    node_memory_MemTotal_bytes\n    AND on (instance)\n    label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n  )\n) * 100 > 60\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "extremely-high-individual-control-plane-memory",
        "rules": [
          {
            "alert": "ExtremelyHighIndividualControlPlaneMemory",
            "annotations": {
              "description": "The memory utilization per instance within control plane nodes influence the stability, and responsiveness of the cluster. This can lead to cluster instability and slow responses from kube-apiserver or failing requests specially on etcd. Moreover, OOM kill is expected which negatively influences the pod scheduling. If this happens on container level, the descheduler will not be able to detect it, as it works on the pod level. To fix this, increase memory of the affected node of control plane nodes.",
              "summary": "Extreme memory utilization per node within control plane nodes is extremely high, and could impact responsiveness and stability."
            },
            "expr": "(\n  1\n  -\n  sum by (instance) (\n    node_memory_MemFree_bytes\n    + node_memory_Buffers_bytes\n    + node_memory_Cached_bytes\n    AND on (instance)\n    label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n  ) / sum by (instance) (\n    node_memory_MemTotal_bytes\n    AND on (instance)\n    label_replace( kube_node_role{role=\"master\"}, \"instance\", \"$1\", \"node\", \"(.+)\" )\n  )\n) * 100 > 90\n",
            "for": "45m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "capability.openshift.io/name": "marketplace",
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true",
      "include.release.openshift.io/single-node-developer": "true"
    },
    "creationTimestamp": "2022-10-12T21:28:59Z",
    "generation": 1,
    "labels": {
      "prometheus": "alert-rules",
      "role": "alert-rules"
    },
    "name": "marketplace-alert-rules",
    "namespace": "openshift-marketplace",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "8086",
    "uid": "e3d9eb37-50f5-4a34-bbd6-0fe1acaaecc0"
  },
  "spec": {
    "groups": [
      {
        "name": "marketplace.community_operators.rules",
        "rules": [
          {
            "alert": "CommunityOperatorsCatalogError",
            "annotations": {
              "description": "Fires whenever the community-operators source is not ready for more than 10 mins.",
              "message": "Default OperatorHub source \"community-operators\" is in Non-Ready state for more than 10 mins.",
              "summary": "Community-operators not ready for 10 minutes"
            },
            "expr": "catalogsource_ready{name=\"community-operators\",exported_namespace=\"openshift-marketplace\"} == 0",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "marketplace.certified_operators.rules",
        "rules": [
          {
            "alert": "CertifiedOperatorsCatalogError",
            "annotations": {
              "description": "Fires whenever the certified-operators source is not ready for more than 10 mins.",
              "message": "Default OperatorHub source \"certified-operators\" is in Non-Ready state for more than 10 mins.",
              "summary": "Certified-operators not ready for more than 10 minutes"
            },
            "expr": "catalogsource_ready{name=\"certified-operators\",exported_namespace=\"openshift-marketplace\"} == 0",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "marketplace.redhat_operators.rules",
        "rules": [
          {
            "alert": "RedhatOperatorsCatalogError",
            "annotations": {
              "description": "Fires whenever the redhat-operators source is not ready for more than 10 mins.",
              "message": "Default OperatorHub source \"redhat-operators\" is in Non-Ready state for more than 10 mins.",
              "summary": "Redhat-operators not ready for more than 10 minutes"
            },
            "expr": "catalogsource_ready{name=\"redhat-operators\",exported_namespace=\"openshift-marketplace\"} == 0",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "marketplace.redhat_marketplace.rules",
        "rules": [
          {
            "alert": "RedhatMarketplaceCatalogError",
            "annotations": {
              "description": "Fires whenever the redhat-marketplace source is not ready for more than 10 mins.",
              "message": "Default OperatorHub source \"redhat-marketplace\" is in Non-Ready state for more than 10 mins.",
              "summary": "Redhat-marketplace not ready for more than 10 minutes"
            },
            "expr": "catalogsource_ready{name=\"redhat-marketplace\",exported_namespace=\"openshift-marketplace\"} == 0",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:34:53Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "alert-router",
      "app.kubernetes.io/instance": "main",
      "app.kubernetes.io/name": "alertmanager",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "0.24.0",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "alertmanager-main-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "12809",
    "uid": "b80661e0-3923-4ba5-8482-530e2313404b"
  },
  "spec": {
    "groups": [
      {
        "name": "alertmanager.rules",
        "rules": [
          {
            "alert": "AlertmanagerFailedReload",
            "annotations": {
              "description": "Configuration has failed to load for {{ $labels.namespace }}/{{ $labels.pod}}.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/AlertmanagerFailedReload.md",
              "summary": "Reloading an Alertmanager configuration has failed."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\nmax_over_time(alertmanager_config_last_reload_successful{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m]) == 0\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "AlertmanagerMembersInconsistent",
            "annotations": {
              "description": "Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} has only found {{ $value }} members of the {{$labels.job}} cluster.",
              "summary": "A member of an Alertmanager cluster has not found all other cluster members."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\n  max_over_time(alertmanager_cluster_members{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m])\n< on (namespace,service) group_left\n  count by (namespace,service) (max_over_time(alertmanager_cluster_members{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m]))\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "AlertmanagerFailedToSendAlerts",
            "annotations": {
              "description": "Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} failed to send {{ $value | humanizePercentage }} of notifications to {{ $labels.integration }}.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/AlertmanagerFailedToSendAlerts.md",
              "summary": "An Alertmanager instance failed to send notifications."
            },
            "expr": "(\n  rate(alertmanager_notifications_failed_total{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m])\n/\n  rate(alertmanager_notifications_total{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m])\n)\n> 0.01\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "AlertmanagerClusterFailedToSendAlerts",
            "annotations": {
              "description": "The minimum notification failure rate to {{ $labels.integration }} sent from any instance in the {{$labels.job}} cluster is {{ $value | humanizePercentage }}.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/AlertmanagerClusterFailedToSendAlerts.md",
              "summary": "All Alertmanager instances in a cluster failed to send notifications to a critical integration."
            },
            "expr": "min by (namespace,service, integration) (\n  rate(alertmanager_notifications_failed_total{job=~\"alertmanager-main|alertmanager-user-workload\", integration=~`.*`}[5m])\n/\n  rate(alertmanager_notifications_total{job=~\"alertmanager-main|alertmanager-user-workload\", integration=~`.*`}[5m])\n)\n> 0.01\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "AlertmanagerConfigInconsistent",
            "annotations": {
              "description": "Alertmanager instances within the {{$labels.job}} cluster have different configurations.",
              "summary": "Alertmanager instances within the same cluster have different configurations."
            },
            "expr": "count by (namespace,service) (\n  count_values by (namespace,service) (\"config_hash\", alertmanager_config_hash{job=~\"alertmanager-main|alertmanager-user-workload\"})\n)\n!= 1\n",
            "for": "20m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "AlertmanagerClusterDown",
            "annotations": {
              "description": "{{ $value | humanizePercentage }} of Alertmanager instances within the {{$labels.job}} cluster have been up for less than half of the last 5m.",
              "summary": "Half or more of the Alertmanager instances within the same cluster are down."
            },
            "expr": "(\n  count by (namespace,service) (\n    avg_over_time(up{job=~\"alertmanager-main|alertmanager-user-workload\"}[5m]) < 0.5\n  )\n/\n  count by (namespace,service) (\n    up{job=~\"alertmanager-main|alertmanager-user-workload\"}\n  )\n)\n>= 0.5\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:29:01Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "operator",
      "app.kubernetes.io/name": "cluster-monitoring-operator",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "cluster-monitoring-operator-prometheus-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "8179",
    "uid": "e3053d4b-7cd3-4073-9f36-7341835b1aa6"
  },
  "spec": {
    "groups": [
      {
        "name": "openshift-general.rules",
        "rules": [
          {
            "alert": "TargetDown",
            "annotations": {
              "description": "{{ printf \"%.4g\" $value }}% of the {{ $labels.job }}/{{ $labels.service }} targets in {{ $labels.namespace }} namespace have been unreachable for more than 15 minutes. This may be a symptom of network connectivity issues, down nodes, or failures within these components. Assess the health of the infrastructure and nodes running these targets and then contact support.",
              "summary": "Some targets were not reachable from the monitoring server for an extended period of time."
            },
            "expr": "100 * (count(up == 0 unless on (node) max by (node) (kube_node_spec_unschedulable == 1)) BY (job, namespace, service) /\n  count(up unless on (node) max by (node) (kube_node_spec_unschedulable == 1)) BY (job, namespace, service)) > 10\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "openshift-kubernetes.rules",
        "rules": [
          {
            "expr": "sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\"}[5m])) BY (pod, namespace)",
            "record": "pod:container_cpu_usage:sum"
          },
          {
            "expr": "sum(container_fs_usage_bytes{pod!=\"\"}) BY (pod, namespace)",
            "record": "pod:container_fs_usage_bytes:sum"
          },
          {
            "expr": "sum(container_memory_usage_bytes{container!=\"\"}) BY (namespace)",
            "record": "namespace:container_memory_usage_bytes:sum"
          },
          {
            "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[5m])) BY (namespace)",
            "record": "namespace:container_cpu_usage:sum"
          },
          {
            "expr": "sum(container_memory_usage_bytes{container=\"\",pod!=\"\"}) BY (cluster) / sum(machine_memory_bytes) BY (cluster)",
            "record": "cluster:memory_usage:ratio"
          },
          {
            "expr": "sum(container_spec_cpu_shares{container=\"\",pod!=\"\"}) / 1000 / sum(machine_cpu_cores)",
            "record": "cluster:container_spec_cpu_shares:ratio"
          },
          {
            "expr": "sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\"}[5m])) / sum(machine_cpu_cores)",
            "record": "cluster:container_cpu_usage:ratio"
          },
          {
            "expr": "max without(endpoint, instance, job, pod, service) (kube_node_labels and on(node) kube_node_role{role=\"master\"})",
            "labels": {
              "label_node_role_kubernetes_io": "master",
              "label_node_role_kubernetes_io_master": "true"
            },
            "record": "cluster:master_nodes"
          },
          {
            "expr": "max without(endpoint, instance, job, pod, service) (kube_node_labels and on(node) kube_node_role{role=\"infra\"})",
            "labels": {
              "label_node_role_kubernetes_io_infra": "true"
            },
            "record": "cluster:infra_nodes"
          },
          {
            "expr": "max without(endpoint, instance, job, pod, service) (cluster:master_nodes and on(node) cluster:infra_nodes)",
            "labels": {
              "label_node_role_kubernetes_io_infra": "true",
              "label_node_role_kubernetes_io_master": "true"
            },
            "record": "cluster:master_infra_nodes"
          },
          {
            "expr": "cluster:master_infra_nodes or on (node) cluster:master_nodes or on (node) cluster:infra_nodes or on (node) max without(endpoint, instance, job, pod, service) (kube_node_labels)",
            "record": "cluster:nodes_roles"
          },
          {
            "expr": "kube_node_labels and on(node) (sum(label_replace(node_cpu_info, \"node\", \"$1\", \"instance\", \"(.*)\")) by (node, package, core) == 2)",
            "labels": {
              "label_node_hyperthread_enabled": "true"
            },
            "record": "cluster:hyperthread_enabled_nodes"
          },
          {
            "expr": "count(sum(virt_platform) by (instance, type, system_manufacturer, system_product_name, baseboard_manufacturer, baseboard_product_name)) by (type, system_manufacturer, system_product_name, baseboard_manufacturer, baseboard_product_name)",
            "record": "cluster:virt_platform_nodes:sum"
          },
          {
            "expr": "sum by(label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io, label_kubernetes_io_arch, label_node_openshift_io_os_id) (\n  (\n    cluster:master_nodes\n    * on(node) group_left() max by(node)\n    (\n      kube_node_status_capacity{resource=\"cpu\",unit=\"core\"}\n    )\n  )\n  or on(node) (\n    max without(endpoint, instance, job, pod, service)\n    (\n      kube_node_labels\n    ) * on(node) group_left() max by(node)\n    (\n      kube_node_status_capacity{resource=\"cpu\",unit=\"core\"}\n    )\n  )\n)\n",
            "record": "cluster:capacity_cpu_cores:sum"
          },
          {
            "expr": "clamp_max(\n  label_replace(\n    sum by(instance, package, core) (\n      node_cpu_info{core!=\"\",package!=\"\"}\n      or\n      # Assume core = cpu and package = 0 for platforms that don't expose core/package labels.\n      label_replace(label_join(node_cpu_info{core=\"\",package=\"\"}, \"core\", \"\", \"cpu\"), \"package\", \"0\", \"package\", \"\")\n    ) > 1,\n    \"label_node_hyperthread_enabled\",\n    \"true\",\n    \"instance\",\n    \"(.*)\"\n  ) or on (instance, package)\n  label_replace(\n    sum by(instance, package, core) (\n      label_replace(node_cpu_info{core!=\"\",package!=\"\"}\n      or\n      # Assume core = cpu and package = 0 for platforms that don't expose core/package labels.\n      label_join(node_cpu_info{core=\"\",package=\"\"}, \"core\", \"\", \"cpu\"), \"package\", \"0\", \"package\", \"\")\n    ) <= 1,\n    \"label_node_hyperthread_enabled\",\n    \"false\",\n    \"instance\",\n    \"(.*)\"\n  ),\n  1\n)\n",
            "record": "cluster:cpu_core_hyperthreading"
          },
          {
            "expr": "topk by(node) (1, cluster:nodes_roles) * on (node)\n  group_right( label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io, label_node_openshift_io_os_id, label_kubernetes_io_arch,\n               label_node_role_kubernetes_io_master, label_node_role_kubernetes_io_infra)\nlabel_replace( cluster:cpu_core_hyperthreading, \"node\", \"$1\", \"instance\", \"(.*)\" )\n",
            "record": "cluster:cpu_core_node_labels"
          },
          {
            "expr": "count(cluster:cpu_core_node_labels) by (label_beta_kubernetes_io_instance_type, label_node_hyperthread_enabled)",
            "record": "cluster:capacity_cpu_cores_hyperthread_enabled:sum"
          },
          {
            "expr": "sum by(label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io)\n(\n  (\n    cluster:master_nodes\n    * on(node) group_left() max by(node)\n    (\n      kube_node_status_capacity{resource=\"memory\",unit=\"byte\"}\n    )\n  )\n  or on(node)\n  (\n    max without(endpoint, instance, job, pod, service)\n    (\n      kube_node_labels\n    )\n    * on(node) group_left() max by(node)\n    (\n      kube_node_status_capacity{resource=\"memory\",unit=\"byte\"}\n    )\n  )\n)\n",
            "record": "cluster:capacity_memory_bytes:sum"
          },
          {
            "expr": "sum(1 - rate(node_cpu_seconds_total{mode=\"idle\"}[2m]) * on(namespace, pod) group_left(node) node_namespace_pod:kube_pod_info:{pod=~\"node-exporter.+\"})",
            "record": "cluster:cpu_usage_cores:sum"
          },
          {
            "expr": "sum(node_memory_MemTotal_bytes{job=\"node-exporter\"} - node_memory_MemAvailable_bytes{job=\"node-exporter\"})",
            "record": "cluster:memory_usage_bytes:sum"
          },
          {
            "expr": "sum(rate(container_cpu_usage_seconds_total{namespace!~\"openshift-.+\",pod!=\"\",container=\"\"}[5m]))",
            "record": "workload:cpu_usage_cores:sum"
          },
          {
            "expr": "cluster:cpu_usage_cores:sum - workload:cpu_usage_cores:sum",
            "record": "openshift:cpu_usage_cores:sum"
          },
          {
            "expr": "sum(container_memory_working_set_bytes{namespace!~\"openshift-.+\",pod!=\"\",container=\"\"})",
            "record": "workload:memory_usage_bytes:sum"
          },
          {
            "expr": "cluster:memory_usage_bytes:sum - workload:memory_usage_bytes:sum",
            "record": "openshift:memory_usage_bytes:sum"
          },
          {
            "expr": "sum(cluster:master_nodes or on(node) kube_node_labels ) BY (label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io, label_kubernetes_io_arch, label_node_openshift_io_os_id)",
            "record": "cluster:node_instance_type_count:sum"
          },
          {
            "expr": "sum by(provisioner) (\n  topk by (namespace, persistentvolumeclaim) (\n    1, kube_persistentvolumeclaim_resource_requests_storage_bytes\n  ) * on(namespace, persistentvolumeclaim) group_right()\n  topk by(namespace, persistentvolumeclaim) (\n    1, kube_persistentvolumeclaim_info * on(storageclass) group_left(provisioner) topk by(storageclass) (1, max by(storageclass, provisioner) (kube_storageclass_info))\n  )\n)\n",
            "record": "cluster:kube_persistentvolumeclaim_resource_requests_storage_bytes:provisioner:sum"
          },
          {
            "expr": "(sum(node_role_os_version_machine:cpu_capacity_cores:sum{label_node_role_kubernetes_io_master=\"\",label_node_role_kubernetes_io_infra=\"\"} or absent(__does_not_exist__)*0)) + ((sum(node_role_os_version_machine:cpu_capacity_cores:sum{label_node_role_kubernetes_io_master=\"true\"} or absent(__does_not_exist__)*0) * ((max(cluster_master_schedulable == 1)*0+1) or (absent(cluster_master_schedulable == 1)*0))))",
            "record": "workload:capacity_physical_cpu_cores:sum"
          },
          {
            "expr": "min_over_time(workload:capacity_physical_cpu_cores:sum[5m:15s])",
            "record": "cluster:usage:workload:capacity_physical_cpu_cores:min:5m"
          },
          {
            "expr": "max_over_time(workload:capacity_physical_cpu_cores:sum[5m:15s])",
            "record": "cluster:usage:workload:capacity_physical_cpu_cores:max:5m"
          },
          {
            "expr": "sum  by (provisioner) (\n  topk by (namespace, persistentvolumeclaim) (\n    1, kubelet_volume_stats_used_bytes\n  ) * on (namespace,persistentvolumeclaim) group_right()\n  topk by (namespace, persistentvolumeclaim) (\n    1, kube_persistentvolumeclaim_info * on(storageclass) group_left(provisioner) topk by(storageclass) (1, max by(storageclass, provisioner) (kube_storageclass_info))\n  )\n)\n",
            "record": "cluster:kubelet_volume_stats_used_bytes:provisioner:sum"
          },
          {
            "expr": "sum by (instance) (apiserver_storage_objects)",
            "record": "instance:etcd_object_counts:sum"
          },
          {
            "expr": "topk(500, max by(resource) (apiserver_storage_objects))",
            "record": "cluster:usage:resources:sum"
          },
          {
            "expr": "count(count (kube_pod_restart_policy{type!=\"Always\",namespace!~\"openshift-.+\"}) by (namespace,pod))",
            "record": "cluster:usage:pods:terminal:workload:sum"
          },
          {
            "expr": "sum(max(kubelet_containers_per_pod_count_sum) by (instance))",
            "record": "cluster:usage:containers:sum"
          },
          {
            "expr": "count(cluster:cpu_core_node_labels) by (label_kubernetes_io_arch, label_node_hyperthread_enabled, label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra)",
            "record": "node_role_os_version_machine:cpu_capacity_cores:sum"
          },
          {
            "expr": "count(max(cluster:cpu_core_node_labels) by (node, package, label_beta_kubernetes_io_instance_type, label_node_hyperthread_enabled, label_node_role_kubernetes_io) ) by ( label_beta_kubernetes_io_instance_type, label_node_hyperthread_enabled, label_node_role_kubernetes_io)",
            "record": "cluster:capacity_cpu_sockets_hyperthread_enabled:sum"
          },
          {
            "expr": "count (max(cluster:cpu_core_node_labels) by (node, package, label_kubernetes_io_arch, label_node_hyperthread_enabled, label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra) ) by (label_kubernetes_io_arch, label_node_hyperthread_enabled, label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra)",
            "record": "node_role_os_version_machine:cpu_capacity_sockets:sum"
          },
          {
            "expr": "max(alertmanager_integrations{namespace=\"openshift-monitoring\"})",
            "record": "cluster:alertmanager_integrations:max"
          },
          {
            "expr": "sum by(plugin_name, volume_mode)(pv_collector_total_pv_count)",
            "record": "cluster:kube_persistentvolume_plugin_type_counts:sum"
          },
          {
            "expr": "sum by(version)(vsphere_vcenter_info)",
            "record": "cluster:vsphere_vcenter_info:sum"
          },
          {
            "expr": "sum by(version)(vsphere_esxi_version_total)",
            "record": "cluster:vsphere_esxi_version_total:sum"
          },
          {
            "expr": "sum by(hw_version)(vsphere_node_hw_version_total)",
            "record": "cluster:vsphere_node_hw_version_total:sum"
          },
          {
            "expr": "sum(\n  min by (node) (kube_node_status_condition{condition=\"Ready\",status=\"true\"})\n    and\n  max by (node) (kube_node_role{role=\"master\"})\n) == bool sum(kube_node_role{role=\"master\"})\n",
            "record": "cluster:control_plane:all_nodes_ready"
          },
          {
            "alert": "ClusterMonitoringOperatorReconciliationErrors",
            "annotations": {
              "description": "Errors are occurring during reconciliation cycles. Inspect the cluster-monitoring-operator log for potential root causes.",
              "summary": "Cluster Monitoring Operator is experiencing unexpected reconciliation errors."
            },
            "expr": "max_over_time(cluster_monitoring_operator_last_reconciliation_successful[5m]) == 0",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "AlertmanagerReceiversNotConfigured",
            "annotations": {
              "description": "Alerts are not configured to be sent to a notification system, meaning that you may not be notified in a timely fashion when important failures occur. Check the OpenShift documentation to learn how to configure notifications with Alertmanager.",
              "summary": "Receivers (notification integrations) are not configured on Alertmanager"
            },
            "expr": "cluster:alertmanager_integrations:max == 0",
            "for": "10m",
            "labels": {
              "namespace": "openshift-monitoring",
              "severity": "warning"
            }
          },
          {
            "alert": "KubeDeploymentReplicasMismatch",
            "annotations": {
              "description": "Deployment {{ $labels.namespace }}/{{ $labels.deployment }} has not matched the expected number of replicas for longer than 15 minutes. This indicates that cluster infrastructure is unable to start or restart the necessary components. This most often occurs when one or more nodes are down or partioned from the cluster, or a fault occurs on the node that prevents the workload from starting. In rare cases this may indicate a new version of a cluster component cannot start due to a bug or configuration error. Assess the pods for this deployment to verify they are running on healthy nodes and then contact support.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubeDeploymentReplicasMismatch.md",
              "summary": "Deployment has not matched the expected number of replicas"
            },
            "expr": "(((\n  kube_deployment_spec_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n    >\n  kube_deployment_status_replicas_available{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n) and (\n  changes(kube_deployment_status_replicas_updated{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[5m])\n    ==\n  0\n)) * on() group_left cluster:control_plane:all_nodes_ready) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "MultipleContainersOOMKilled",
            "annotations": {
              "description": "Multiple containers were out of memory killed within the past 15 minutes. There are many potential causes of OOM errors, however issues on a specific node or containers breaching their limits is common.",
              "summary": "Containers are being killed due to OOM"
            },
            "expr": "sum(max by(namespace, container, pod) (increase(kube_pod_container_status_restarts_total[12m])) and max by(namespace, container, pod) (kube_pod_container_status_last_terminated_reason{reason=\"OOMKilled\"}) == 1) > 5",
            "for": "15m",
            "labels": {
              "namespace": "kube-system",
              "severity": "info"
            }
          },
          {
            "expr": "avg_over_time((((count((max by (node) (up{job=\"kubelet\",metrics_path=\"/metrics\"} == 1) and max by (node) (kube_node_status_condition{condition=\"Ready\",status=\"true\"} == 1) and min by (node) (kube_node_spec_unschedulable == 0))) / scalar(count(min by (node) (kube_node_spec_unschedulable == 0))))))[5m:1s])",
            "record": "cluster:usage:kube_schedulable_node_ready_reachable:avg5m"
          },
          {
            "expr": "avg_over_time((count(max by (node) (kube_node_status_condition{condition=\"Ready\",status=\"true\"} == 1)) / scalar(count(max by (node) (kube_node_status_condition{condition=\"Ready\",status=\"true\"}))))[5m:1s])",
            "record": "cluster:usage:kube_node_ready:avg5m"
          },
          {
            "expr": "(max without (condition,container,endpoint,instance,job,service) (((kube_pod_status_ready{condition=\"false\"} == 1)*0 or (kube_pod_status_ready{condition=\"true\"} == 1)) * on(pod,namespace) group_left() group by (pod,namespace) (kube_pod_status_phase{phase=~\"Running|Unknown|Pending\"} == 1)))",
            "record": "kube_running_pod_ready"
          },
          {
            "expr": "avg(kube_running_pod_ready{namespace=~\"openshift-.*\"})",
            "record": "cluster:usage:openshift:kube_running_pod_ready:avg"
          },
          {
            "expr": "avg(kube_running_pod_ready{namespace!~\"openshift-.*\"})",
            "record": "cluster:usage:workload:kube_running_pod_ready:avg"
          }
        ]
      },
      {
        "interval": "30s",
        "name": "kubernetes-recurring.rules",
        "rules": [
          {
            "expr": "sum_over_time(workload:capacity_physical_cpu_cores:sum[30s:1s]) + ((cluster:usage:workload:capacity_physical_cpu_core_seconds offset 25s) or (absent(cluster:usage:workload:capacity_physical_cpu_core_seconds offset 25s)*0))",
            "record": "cluster:usage:workload:capacity_physical_cpu_core_seconds"
          }
        ]
      },
      {
        "name": "openshift-ingress.rules",
        "rules": [
          {
            "expr": "sum by (code) (rate(haproxy_server_http_responses_total[5m]) > 0)",
            "record": "code:cluster:ingress_http_request_count:rate5m:sum"
          },
          {
            "expr": "sum (rate(haproxy_frontend_bytes_in_total[5m]))",
            "record": "cluster:usage:ingress_frontend_bytes_in:rate5m:sum"
          },
          {
            "expr": "sum (rate(haproxy_frontend_bytes_out_total[5m]))",
            "record": "cluster:usage:ingress_frontend_bytes_out:rate5m:sum"
          },
          {
            "expr": "sum (haproxy_frontend_current_sessions)",
            "record": "cluster:usage:ingress_frontend_connections:sum"
          },
          {
            "expr": "sum(max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{code!~\"2xx|1xx|4xx|3xx\",exported_namespace!~\"openshift-.*\"}[5m]) > 0)) / sum (max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{exported_namespace!~\"openshift-.*\"}[5m]))) or absent(__does_not_exist__)*0",
            "record": "cluster:usage:workload:ingress_request_error:fraction5m"
          },
          {
            "expr": "sum (max without(service,endpoint,container,pod,job,namespace) (irate(haproxy_server_http_responses_total{exported_namespace!~\"openshift-.*\"}[5m]))) or absent(__does_not_exist__)*0",
            "record": "cluster:usage:workload:ingress_request_total:irate5m"
          },
          {
            "expr": "sum(max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{code!~\"2xx|1xx|4xx|3xx\",exported_namespace=~\"openshift-.*\"}[5m]) > 0)) / sum (max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{exported_namespace=~\"openshift-.*\"}[5m]))) or absent(__does_not_exist__)*0",
            "record": "cluster:usage:openshift:ingress_request_error:fraction5m"
          },
          {
            "expr": "sum (max without(service,endpoint,container,pod,job,namespace) (irate(haproxy_server_http_responses_total{exported_namespace=~\"openshift-.*\"}[5m]))) or absent(__does_not_exist__)*0",
            "record": "cluster:usage:openshift:ingress_request_total:irate5m"
          },
          {
            "expr": "sum(ingress_controller_aws_nlb_active) or vector(0)",
            "record": "cluster:ingress_controller_aws_nlb_active:sum"
          }
        ]
      },
      {
        "name": "openshift-build.rules",
        "rules": [
          {
            "expr": "sum by (strategy) (openshift_build_status_phase_total)",
            "record": "openshift:build_by_strategy:sum"
          }
        ]
      },
      {
        "name": "openshift-monitoring.rules",
        "rules": [
          {
            "expr": "sum by (job,namespace) (max without(instance) (prometheus_tsdb_head_series{namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}))",
            "record": "openshift:prometheus_tsdb_head_series:sum"
          },
          {
            "expr": "sum by(job,namespace) (max without(instance) (rate(prometheus_tsdb_head_samples_appended_total{namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[2m])))",
            "record": "openshift:prometheus_tsdb_head_samples_appended_total:sum"
          },
          {
            "expr": "sum by (namespace) (max without(instance) (container_memory_working_set_bytes{namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\", container=\"\"}))",
            "record": "monitoring:container_memory_working_set_bytes:sum"
          },
          {
            "expr": "topk(3, sum by(namespace, job)(sum_over_time(scrape_series_added[1h])))",
            "record": "namespace_job:scrape_series_added:topk3_sum1h"
          },
          {
            "expr": "topk(3, max by(namespace, job) (topk by(namespace,job) (1, scrape_samples_post_metric_relabeling)))",
            "record": "namespace_job:scrape_samples_post_metric_relabeling:topk3"
          },
          {
            "expr": "sum by(exported_service) (rate(haproxy_server_http_responses_total{exported_namespace=\"openshift-monitoring\", exported_service=~\"alertmanager-main|prometheus-k8s\"}[5m]))",
            "record": "monitoring:haproxy_server_http_responses_total:sum"
          },
          {
            "expr": "max by (cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicationController\"},\"replicationcontroller\", \"$1\", \"owner_name\", \"(.*)\") * on(replicationcontroller, namespace) group_left(owner_name) topk by(replicationcontroller, namespace) (1, max by (replicationcontroller, namespace, owner_name) (kube_replicationcontroller_owner{job=\"kube-state-metrics\"})),\"workload\", \"$1\", \"owner_name\", \"(.*)\"))",
            "labels": {
              "workload_type": "deploymentconfig"
            },
            "record": "namespace_workload_pod:kube_pod_owner:relabel"
          }
        ]
      },
      {
        "name": "openshift-etcd-telemetry.rules",
        "rules": [
          {
            "expr": "sum by (instance) (etcd_mvcc_db_total_size_in_bytes{job=\"etcd\"})",
            "record": "instance:etcd_mvcc_db_total_size_in_bytes:sum"
          },
          {
            "expr": "histogram_quantile(0.99, sum by (instance, le) (rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=\"etcd\"}[5m])))",
            "labels": {
              "quantile": "0.99"
            },
            "record": "instance:etcd_disk_wal_fsync_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.99, sum by (instance, le) (rate(etcd_network_peer_round_trip_time_seconds_bucket{job=\"etcd\"}[5m])))",
            "labels": {
              "quantile": "0.99"
            },
            "record": "instance:etcd_network_peer_round_trip_time_seconds:histogram_quantile"
          },
          {
            "expr": "sum by (instance) (etcd_mvcc_db_total_size_in_use_in_bytes{job=\"etcd\"})",
            "record": "instance:etcd_mvcc_db_total_size_in_use_in_bytes:sum"
          },
          {
            "expr": "histogram_quantile(0.99, sum by (instance, le) (rate(etcd_disk_backend_commit_duration_seconds_bucket{job=\"etcd\"}[5m])))",
            "labels": {
              "quantile": "0.99"
            },
            "record": "instance:etcd_disk_backend_commit_duration_seconds:histogram_quantile"
          }
        ]
      },
      {
        "name": "openshift-sre.rules",
        "rules": [
          {
            "expr": "sum(rate(apiserver_request_total{job=\"apiserver\"}[10m])) BY (code)",
            "record": "code:apiserver_request_total:rate:sum"
          }
        ]
      },
      {
        "name": "general.rules",
        "rules": [
          {
            "alert": "Watchdog",
            "annotations": {
              "description": "This is an alert meant to ensure that the entire alerting pipeline is functional.\nThis alert is always firing, therefore it should always be firing in Alertmanager\nand always fire against a receiver. There are integrations with various notification\nmechanisms that send a notification when this alert is not firing. For example the\n\"DeadMansSnitch\" integration in PagerDuty.\n",
              "summary": "An alert that should always be firing to certify that Alertmanager is working properly."
            },
            "expr": "vector(1)",
            "labels": {
              "namespace": "openshift-monitoring",
              "severity": "none"
            }
          }
        ]
      },
      {
        "name": "node-network",
        "rules": [
          {
            "alert": "NodeNetworkInterfaceFlapping",
            "annotations": {
              "description": "Network interface \"{{ $labels.device }}\" changing its up status often on node-exporter {{ $labels.namespace }}/{{ $labels.pod }}",
              "summary": "Network interface is often changing its status"
            },
            "expr": "changes(node_network_up{job=\"node-exporter\",device!~\"veth.+|tunbr\"}[2m]) > 2\n",
            "for": "2m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kube-prometheus-node-recording.rules",
        "rules": [
          {
            "expr": "sum(rate(node_cpu_seconds_total{mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[3m])) BY (instance)",
            "record": "instance:node_cpu:rate:sum"
          },
          {
            "expr": "sum(rate(node_network_receive_bytes_total[3m])) BY (instance)",
            "record": "instance:node_network_receive_bytes:rate:sum"
          },
          {
            "expr": "sum(rate(node_network_transmit_bytes_total[3m])) BY (instance)",
            "record": "instance:node_network_transmit_bytes:rate:sum"
          },
          {
            "expr": "sum(rate(node_cpu_seconds_total{mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m]))",
            "record": "cluster:node_cpu:sum_rate5m"
          },
          {
            "expr": "cluster:node_cpu:sum_rate5m / count(sum(node_cpu_seconds_total) BY (instance, cpu))",
            "record": "cluster:node_cpu:ratio"
          }
        ]
      },
      {
        "name": "kube-prometheus-general.rules",
        "rules": [
          {
            "expr": "count without(instance, pod, node) (up == 1)",
            "record": "count:up1"
          },
          {
            "expr": "count without(instance, pod, node) (up == 0)",
            "record": "count:up0"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:07Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "exporter",
      "app.kubernetes.io/name": "kube-state-metrics",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "2.5.0",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "kube-state-metrics-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "9149",
    "uid": "ab47ff17-9c31-4c62-9f65-3e8acd7c7c37"
  },
  "spec": {
    "groups": [
      {
        "name": "kube-state-metrics",
        "rules": [
          {
            "alert": "KubeStateMetricsListErrors",
            "annotations": {
              "description": "kube-state-metrics is experiencing errors at an elevated rate in list operations. This is likely causing it to not be able to expose metrics about Kubernetes objects correctly or at all.",
              "summary": "kube-state-metrics is experiencing errors in list operations."
            },
            "expr": "(sum(rate(kube_state_metrics_list_total{job=\"kube-state-metrics\",result=\"error\"}[5m]))\n  /\nsum(rate(kube_state_metrics_list_total{job=\"kube-state-metrics\"}[5m])))\n> 0.01\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeStateMetricsWatchErrors",
            "annotations": {
              "description": "kube-state-metrics is experiencing errors at an elevated rate in watch operations. This is likely causing it to not be able to expose metrics about Kubernetes objects correctly or at all.",
              "summary": "kube-state-metrics is experiencing errors in watch operations."
            },
            "expr": "(sum(rate(kube_state_metrics_watch_total{job=\"kube-state-metrics\",result=\"error\"}[5m]))\n  /\nsum(rate(kube_state_metrics_watch_total{job=\"kube-state-metrics\"}[5m])))\n> 0.01\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:28:56Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/name": "kube-prometheus",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "kubernetes-monitoring-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "7981",
    "uid": "5fe8bcfa-4f00-4d53-9043-1dfcce0a8dde"
  },
  "spec": {
    "groups": [
      {
        "name": "kubernetes-apps",
        "rules": [
          {
            "alert": "KubePodCrashLooping",
            "annotations": {
              "description": "Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container }}) is in waiting state (reason: \"CrashLoopBackOff\").",
              "summary": "Pod is crash looping."
            },
            "expr": "max_over_time(kube_pod_container_status_waiting_reason{reason=\"CrashLoopBackOff\", namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[5m]) >= 1\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubePodNotReady",
            "annotations": {
              "description": "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready state for longer than 15 minutes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubePodNotReady.md",
              "summary": "Pod has been in a non-ready state for more than 15 minutes."
            },
            "expr": "sum by (namespace, pod, cluster) (\n  max by(namespace, pod, cluster) (\n    kube_pod_status_phase{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", phase=~\"Pending|Unknown\"}\n  ) * on(namespace, pod, cluster) group_left(owner_kind) topk by(namespace, pod, cluster) (\n    1, max by(namespace, pod, owner_kind, cluster) (kube_pod_owner{owner_kind!=\"Job\"})\n  )\n) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeDeploymentGenerationMismatch",
            "annotations": {
              "description": "Deployment generation for {{ $labels.namespace }}/{{ $labels.deployment }} does not match, this indicates that the Deployment has failed but has not been rolled back.",
              "summary": "Deployment generation mismatch due to possible roll-back"
            },
            "expr": "kube_deployment_status_observed_generation{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  !=\nkube_deployment_metadata_generation{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeStatefulSetReplicasMismatch",
            "annotations": {
              "description": "StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} has not matched the expected number of replicas for longer than 15 minutes.",
              "summary": "Deployment has not matched the expected number of replicas."
            },
            "expr": "(\n  kube_statefulset_status_replicas_ready{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n    !=\n  kube_statefulset_status_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n) and (\n  changes(kube_statefulset_status_replicas_updated{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[10m])\n    ==\n  0\n)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeStatefulSetGenerationMismatch",
            "annotations": {
              "description": "StatefulSet generation for {{ $labels.namespace }}/{{ $labels.statefulset }} does not match, this indicates that the StatefulSet has failed but has not been rolled back.",
              "summary": "StatefulSet generation mismatch due to possible roll-back"
            },
            "expr": "kube_statefulset_status_observed_generation{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  !=\nkube_statefulset_metadata_generation{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeStatefulSetUpdateNotRolledOut",
            "annotations": {
              "description": "StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} update has not been rolled out.",
              "summary": "StatefulSet update has not been rolled out."
            },
            "expr": "(\n  max without (revision) (\n    kube_statefulset_status_current_revision{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n      unless\n    kube_statefulset_status_update_revision{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  )\n    *\n  (\n    kube_statefulset_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n      !=\n    kube_statefulset_status_replicas_updated{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  )\n)  and (\n  changes(kube_statefulset_status_replicas_updated{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[5m])\n    ==\n  0\n)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeDaemonSetRolloutStuck",
            "annotations": {
              "description": "DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset }} has not finished or progressed for at least 30 minutes.",
              "summary": "DaemonSet rollout is stuck."
            },
            "expr": "(\n  (\n    kube_daemonset_status_current_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n     !=\n    kube_daemonset_status_desired_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  ) or (\n    kube_daemonset_status_number_misscheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n     !=\n    0\n  ) or (\n    kube_daemonset_status_updated_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n     !=\n    kube_daemonset_status_desired_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  ) or (\n    kube_daemonset_status_number_available{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n     !=\n    kube_daemonset_status_desired_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  )\n) and (\n  changes(kube_daemonset_status_updated_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[5m])\n    ==\n  0\n)\n",
            "for": "30m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeContainerWaiting",
            "annotations": {
              "description": "pod/{{ $labels.pod }} in namespace {{ $labels.namespace }} on container {{ $labels.container}} has been in waiting state for longer than 1 hour.",
              "summary": "Pod container waiting longer than 1 hour"
            },
            "expr": "sum by (namespace, pod, container, cluster) (kube_pod_container_status_waiting_reason{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}) > 0\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeDaemonSetNotScheduled",
            "annotations": {
              "description": "{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset }} are not scheduled.",
              "summary": "DaemonSet pods are not scheduled."
            },
            "expr": "kube_daemonset_status_desired_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  -\nkube_daemonset_status_current_number_scheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"} > 0\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeDaemonSetMisScheduled",
            "annotations": {
              "description": "{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset }} are running where they are not supposed to run.",
              "summary": "DaemonSet pods are misscheduled."
            },
            "expr": "kube_daemonset_status_number_misscheduled{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"} > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeJobNotCompleted",
            "annotations": {
              "description": "Job {{ $labels.namespace }}/{{ $labels.job_name }} is taking more than {{ \"43200\" | humanizeDuration }} to complete.",
              "summary": "Job did not complete in time"
            },
            "expr": "time() - max by(namespace, job_name, cluster) (kube_job_status_start_time{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  and\nkube_job_status_active{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"} > 0) > 43200\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeJobFailed",
            "annotations": {
              "description": "Job {{ $labels.namespace }}/{{ $labels.job_name }} failed to complete. Removing failed job after investigation should clear this alert.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubeJobFailed.md",
              "summary": "Job failed to complete."
            },
            "expr": "kube_job_failed{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}  > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeHpaReplicasMismatch",
            "annotations": {
              "description": "HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }} has not matched the desired number of replicas for longer than 15 minutes.",
              "summary": "HPA has not matched descired number of replicas."
            },
            "expr": "(kube_horizontalpodautoscaler_status_desired_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  !=\nkube_horizontalpodautoscaler_status_current_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"})\n  and\n(kube_horizontalpodautoscaler_status_current_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  >\nkube_horizontalpodautoscaler_spec_min_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"})\n  and\n(kube_horizontalpodautoscaler_status_current_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  <\nkube_horizontalpodautoscaler_spec_max_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"})\n  and\nchanges(kube_horizontalpodautoscaler_status_current_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}[15m]) == 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeHpaMaxedOut",
            "annotations": {
              "description": "HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }} has been running at max replicas for longer than 15 minutes.",
              "summary": "HPA is running at max replicas"
            },
            "expr": "kube_horizontalpodautoscaler_status_current_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n  ==\nkube_horizontalpodautoscaler_spec_max_replicas{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"}\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kubernetes-resources",
        "rules": [
          {
            "alert": "KubeCPUOvercommit",
            "annotations": {
              "description": "Cluster has overcommitted CPU resource requests for Pods by {{ $value }} CPU shares and cannot tolerate node failure.",
              "summary": "Cluster has overcommitted CPU resource requests."
            },
            "expr": "sum(namespace_cpu:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource=\"cpu\"}) - max(kube_node_status_allocatable{resource=\"cpu\"})) > 0\nand\n(sum(kube_node_status_allocatable{resource=\"cpu\"}) - max(kube_node_status_allocatable{resource=\"cpu\"})) > 0\n",
            "for": "10m",
            "labels": {
              "namespace": "kube-system",
              "severity": "warning"
            }
          },
          {
            "alert": "KubeMemoryOvercommit",
            "annotations": {
              "description": "Cluster has overcommitted memory resource requests for Pods by {{ $value | humanize }} bytes and cannot tolerate node failure.",
              "summary": "Cluster has overcommitted memory resource requests."
            },
            "expr": "sum(namespace_memory:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource=\"memory\"}) - max(kube_node_status_allocatable{resource=\"memory\"})) > 0\nand\n(sum(kube_node_status_allocatable{resource=\"memory\"}) - max(kube_node_status_allocatable{resource=\"memory\"})) > 0\n",
            "for": "10m",
            "labels": {
              "namespace": "kube-system",
              "severity": "warning"
            }
          },
          {
            "alert": "KubeCPUQuotaOvercommit",
            "annotations": {
              "description": "Cluster has overcommitted CPU resource requests for Namespaces.",
              "summary": "Cluster has overcommitted CPU resource requests."
            },
            "expr": "sum(min without(resource) (kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"hard\", resource=~\"(cpu|requests.cpu)\"}))\n  /\nsum(kube_node_status_allocatable{resource=\"cpu\", job=\"kube-state-metrics\"})\n  > 1.5\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeMemoryQuotaOvercommit",
            "annotations": {
              "description": "Cluster has overcommitted memory resource requests for Namespaces.",
              "summary": "Cluster has overcommitted memory resource requests."
            },
            "expr": "sum(min without(resource) (kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"hard\", resource=~\"(memory|requests.memory)\"}))\n  /\nsum(kube_node_status_allocatable{resource=\"memory\", job=\"kube-state-metrics\"})\n  > 1.5\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeQuotaAlmostFull",
            "annotations": {
              "description": "Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.",
              "summary": "Namespace quota is going to be full."
            },
            "expr": "kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"used\"}\n  / ignoring(instance, job, type)\n(kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"hard\"} > 0)\n  > 0.9 < 1\n",
            "for": "15m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "KubeQuotaFullyUsed",
            "annotations": {
              "description": "Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.",
              "summary": "Namespace quota is fully used."
            },
            "expr": "kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"used\"}\n  / ignoring(instance, job, type)\n(kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"hard\"} > 0)\n  == 1\n",
            "for": "15m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "KubeQuotaExceeded",
            "annotations": {
              "description": "Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.",
              "summary": "Namespace quota has exceeded the limits."
            },
            "expr": "kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"used\"}\n  / ignoring(instance, job, type)\n(kube_resourcequota{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\", type=\"hard\"} > 0)\n  > 1\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kubernetes-storage",
        "rules": [
          {
            "alert": "KubePersistentVolumeFillingUp",
            "annotations": {
              "description": "The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }} free.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubePersistentVolumeFillingUp.md",
              "summary": "PersistentVolume is filling up."
            },
            "expr": "(\n  kubelet_volume_stats_available_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n    /\n  kubelet_volume_stats_capacity_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n) < 0.03\nand\nkubelet_volume_stats_used_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"} > 0\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_access_mode{namespace=~\"(openshift-.*|kube-.*|default)\", access_mode=\"ReadOnlyMany\"} == 1\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_labels{namespace=~\"(openshift-.*|kube-.*|default)\",label_alerts_k8s_io_kube_persistent_volume_filling_up=\"disabled\"} == 1\n",
            "for": "1m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "KubePersistentVolumeFillingUp",
            "annotations": {
              "description": "Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace }} is expected to fill up within four days. Currently {{ $value | humanizePercentage }} is available.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubePersistentVolumeFillingUp.md",
              "summary": "PersistentVolume is filling up."
            },
            "expr": "(\n  kubelet_volume_stats_available_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n    /\n  kubelet_volume_stats_capacity_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n) < 0.15\nand\nkubelet_volume_stats_used_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"} > 0\nand\npredict_linear(kubelet_volume_stats_available_bytes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}[6h], 4 * 24 * 3600) < 0\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_access_mode{namespace=~\"(openshift-.*|kube-.*|default)\", access_mode=\"ReadOnlyMany\"} == 1\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_labels{namespace=~\"(openshift-.*|kube-.*|default)\",label_alerts_k8s_io_kube_persistent_volume_filling_up=\"disabled\"} == 1\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubePersistentVolumeInodesFillingUp",
            "annotations": {
              "description": "The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace }} only has {{ $value | humanizePercentage }} free inodes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubePersistentVolumeInodesFillingUp.md",
              "summary": "PersistentVolumeInodes are filling up."
            },
            "expr": "(\n  kubelet_volume_stats_inodes_free{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n    /\n  kubelet_volume_stats_inodes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n) < 0.03\nand\nkubelet_volume_stats_inodes_used{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"} > 0\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_access_mode{namespace=~\"(openshift-.*|kube-.*|default)\", access_mode=\"ReadOnlyMany\"} == 1\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_labels{namespace=~\"(openshift-.*|kube-.*|default)\",label_alerts_k8s_io_kube_persistent_volume_filling_up=\"disabled\"} == 1\n",
            "for": "1m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "KubePersistentVolumeInodesFillingUp",
            "annotations": {
              "description": "Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace }} is expected to run out of inodes within four days. Currently {{ $value | humanizePercentage }} of its inodes are free.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubePersistentVolumeInodesFillingUp.md",
              "summary": "PersistentVolumeInodes are filling up."
            },
            "expr": "(\n  kubelet_volume_stats_inodes_free{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n    /\n  kubelet_volume_stats_inodes{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}\n) < 0.15\nand\nkubelet_volume_stats_inodes_used{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"} > 0\nand\npredict_linear(kubelet_volume_stats_inodes_free{namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kubelet\", metrics_path=\"/metrics\"}[6h], 4 * 24 * 3600) < 0\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_access_mode{namespace=~\"(openshift-.*|kube-.*|default)\", access_mode=\"ReadOnlyMany\"} == 1\nunless on(namespace, persistentvolumeclaim)\nkube_persistentvolumeclaim_labels{namespace=~\"(openshift-.*|kube-.*|default)\",label_alerts_k8s_io_kube_persistent_volume_filling_up=\"disabled\"} == 1\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubePersistentVolumeErrors",
            "annotations": {
              "description": "The persistent volume {{ $labels.persistentvolume }} has status {{ $labels.phase }}.",
              "summary": "PersistentVolume is having issues with provisioning."
            },
            "expr": "kube_persistentvolume_status_phase{phase=~\"Failed|Pending\",namespace=~\"(openshift-.*|kube-.*|default)\",job=\"kube-state-metrics\"} > 0\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kubernetes-system",
        "rules": [
          {
            "alert": "KubeClientErrors",
            "annotations": {
              "description": "Kubernetes API server client '{{ $labels.job }}/{{ $labels.instance }}' is experiencing {{ $value | humanizePercentage }} errors.'",
              "summary": "Kubernetes API server client is experiencing errors."
            },
            "expr": "(sum(rate(rest_client_requests_total{code=~\"5..\"}[5m])) by (cluster, instance, job, namespace)\n  /\nsum(rate(rest_client_requests_total[5m])) by (cluster, instance, job, namespace))\n> 0.01\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kubernetes-system-apiserver",
        "rules": [
          {
            "alert": "KubeAggregatedAPIErrors",
            "annotations": {
              "description": "Kubernetes aggregated API {{ $labels.name }}/{{ $labels.namespace }} has reported errors. It has appeared unavailable {{ $value | humanize }} times averaged over the past 10m.",
              "summary": "Kubernetes aggregated API has reported errors."
            },
            "expr": "sum by(name, namespace, cluster)(increase(aggregator_unavailable_apiservice_total[10m])) > 4\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeAggregatedAPIDown",
            "annotations": {
              "description": "Kubernetes aggregated API {{ $labels.name }}/{{ $labels.namespace }} has been only {{ $value | humanize }}% available over the last 10m.",
              "summary": "Kubernetes aggregated API is down."
            },
            "expr": "(1 - max by(name, namespace, cluster)(avg_over_time(aggregator_unavailable_apiservice[10m]))) * 100 < 85\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeAPIDown",
            "annotations": {
              "description": "KubeAPI has disappeared from Prometheus target discovery.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubeAPIDown.md",
              "summary": "Target disappeared from Prometheus target discovery."
            },
            "expr": "absent(up{job=\"apiserver\"} == 1)\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "KubeAPITerminatedRequests",
            "annotations": {
              "description": "The kubernetes apiserver has terminated {{ $value | humanizePercentage }} of its incoming requests.",
              "summary": "The kubernetes apiserver has terminated {{ $value | humanizePercentage }} of its incoming requests."
            },
            "expr": "sum(rate(apiserver_request_terminations_total{job=\"apiserver\"}[10m]))  / (  sum(rate(apiserver_request_total{job=\"apiserver\"}[10m])) + sum(rate(apiserver_request_terminations_total{job=\"apiserver\"}[10m])) ) > 0.20\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "kubernetes-system-kubelet",
        "rules": [
          {
            "alert": "KubeNodeNotReady",
            "annotations": {
              "description": "{{ $labels.node }} has been unready for more than 15 minutes.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubeNodeNotReady.md",
              "summary": "Node is not ready."
            },
            "expr": "kube_node_status_condition{job=\"kube-state-metrics\",condition=\"Ready\",status=\"true\"} == 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeNodeUnreachable",
            "annotations": {
              "description": "{{ $labels.node }} is unreachable and some workloads may be rescheduled.",
              "summary": "Node is unreachable."
            },
            "expr": "(kube_node_spec_taint{job=\"kube-state-metrics\",key=\"node.kubernetes.io/unreachable\",effect=\"NoSchedule\"} unless ignoring(key,value) kube_node_spec_taint{job=\"kube-state-metrics\",key=~\"ToBeDeletedByClusterAutoscaler|cloud.google.com/impending-node-termination|aws-node-termination-handler/spot-itn\"}) == 1\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletTooManyPods",
            "annotations": {
              "description": "Kubelet '{{ $labels.node }}' is running at {{ $value | humanizePercentage }} of its Pod capacity.",
              "summary": "Kubelet is running at capacity."
            },
            "expr": "count by(cluster, node) (\n  (kube_pod_status_phase{job=\"kube-state-metrics\",phase=\"Running\"} == 1) * on(instance,pod,namespace,cluster) group_left(node) topk by(instance,pod,namespace,cluster) (1, kube_pod_info{job=\"kube-state-metrics\"})\n)\n/\nmax by(cluster, node) (\n  kube_node_status_capacity{job=\"kube-state-metrics\",resource=\"pods\"} != 1\n) > 0.95\n",
            "for": "15m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "KubeNodeReadinessFlapping",
            "annotations": {
              "description": "The readiness status of node {{ $labels.node }} has changed {{ $value }} times in the last 15 minutes.",
              "summary": "Node readiness status is flapping."
            },
            "expr": "sum(changes(kube_node_status_condition{status=\"true\",condition=\"Ready\"}[15m])) by (cluster, node) > 2\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletPlegDurationHigh",
            "annotations": {
              "description": "The Kubelet Pod Lifecycle Event Generator has a 99th percentile duration of {{ $value }} seconds on node {{ $labels.node }}.",
              "summary": "Kubelet Pod Lifecycle Event Generator is taking too long to relist."
            },
            "expr": "node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile{quantile=\"0.99\"} >= 10\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletPodStartUpLatencyHigh",
            "annotations": {
              "description": "Kubelet Pod startup 99th percentile latency is {{ $value }} seconds on node {{ $labels.node }}.",
              "summary": "Kubelet Pod startup latency is too high."
            },
            "expr": "histogram_quantile(0.99, sum(rate(kubelet_pod_worker_duration_seconds_bucket{job=\"kubelet\", metrics_path=\"/metrics\"}[5m])) by (cluster, instance, le)) * on(cluster, instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"} > 60\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletClientCertificateRenewalErrors",
            "annotations": {
              "description": "Kubelet on node {{ $labels.node }} has failed to renew its client certificate ({{ $value | humanize }} errors in the last 5 minutes).",
              "summary": "Kubelet has failed to renew its client certificate."
            },
            "expr": "increase(kubelet_certificate_manager_client_expiration_renew_errors[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletServerCertificateRenewalErrors",
            "annotations": {
              "description": "Kubelet on node {{ $labels.node }} has failed to renew its server certificate ({{ $value | humanize }} errors in the last 5 minutes).",
              "summary": "Kubelet has failed to renew its server certificate."
            },
            "expr": "increase(kubelet_server_expiration_renew_errors[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "KubeletDown",
            "annotations": {
              "description": "Kubelet has disappeared from Prometheus target discovery.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/KubeletDown.md",
              "summary": "Target disappeared from Prometheus target discovery."
            },
            "expr": "absent(up{job=\"kubelet\", metrics_path=\"/metrics\"} == 1)\n",
            "for": "15m",
            "labels": {
              "namespace": "kube-system",
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "k8s.rules",
        "rules": [
          {
            "expr": "sum by (cluster, namespace, pod, container) (\n  irate(container_cpu_usage_seconds_total{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\", image!=\"\"}[5m])\n) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (\n  1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\"})\n)\n",
            "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate"
          },
          {
            "expr": "container_memory_working_set_bytes{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,\n  max by(namespace, pod, node) (kube_pod_info{node!=\"\"})\n)\n",
            "record": "node_namespace_pod_container:container_memory_working_set_bytes"
          },
          {
            "expr": "container_memory_rss{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,\n  max by(namespace, pod, node) (kube_pod_info{node!=\"\"})\n)\n",
            "record": "node_namespace_pod_container:container_memory_rss"
          },
          {
            "expr": "container_memory_cache{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,\n  max by(namespace, pod, node) (kube_pod_info{node!=\"\"})\n)\n",
            "record": "node_namespace_pod_container:container_memory_cache"
          },
          {
            "expr": "container_memory_swap{job=\"kubelet\", metrics_path=\"/metrics/cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,\n  max by(namespace, pod, node) (kube_pod_info{node!=\"\"})\n)\n",
            "record": "node_namespace_pod_container:container_memory_swap"
          },
          {
            "expr": "kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)\ngroup_left() max by (namespace, pod, cluster) (\n  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)\n)\n",
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_requests"
          },
          {
            "expr": "sum by (namespace, cluster) (\n    sum by (namespace, pod, cluster) (\n        max by (namespace, pod, container, cluster) (\n          kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}\n        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
            "record": "namespace_memory:kube_pod_container_resource_requests:sum"
          },
          {
            "expr": "kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)\ngroup_left() max by (namespace, pod, cluster) (\n  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)\n)\n",
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests"
          },
          {
            "expr": "sum by (namespace, cluster) (\n    sum by (namespace, pod, cluster) (\n        max by (namespace, pod, container, cluster) (\n          kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}\n        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
            "record": "namespace_cpu:kube_pod_container_resource_requests:sum"
          },
          {
            "expr": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)\ngroup_left() max by (namespace, pod, cluster) (\n  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)\n)\n",
            "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_limits"
          },
          {
            "expr": "sum by (namespace, cluster) (\n    sum by (namespace, pod, cluster) (\n        max by (namespace, pod, container, cluster) (\n          kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}\n        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
            "record": "namespace_memory:kube_pod_container_resource_limits:sum"
          },
          {
            "expr": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)\ngroup_left() max by (namespace, pod, cluster) (\n (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1)\n )\n",
            "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits"
          },
          {
            "expr": "sum by (namespace, cluster) (\n    sum by (namespace, pod, cluster) (\n        max by (namespace, pod, container, cluster) (\n          kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}\n        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
            "record": "namespace_cpu:kube_pod_container_resource_limits:sum"
          },
          {
            "expr": "max by (cluster, namespace, workload, pod) (\n  label_replace(\n    label_replace(\n      kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"},\n      \"replicaset\", \"$1\", \"owner_name\", \"(.*)\"\n    ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (\n      1, max by (replicaset, namespace, owner_name) (\n        kube_replicaset_owner{job=\"kube-state-metrics\"}\n      )\n    ),\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n)\n",
            "labels": {
              "workload_type": "deployment"
            },
            "record": "namespace_workload_pod:kube_pod_owner:relabel"
          },
          {
            "expr": "max by (cluster, namespace, workload, pod) (\n  label_replace(\n    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n)\n",
            "labels": {
              "workload_type": "daemonset"
            },
            "record": "namespace_workload_pod:kube_pod_owner:relabel"
          },
          {
            "expr": "max by (cluster, namespace, workload, pod) (\n  label_replace(\n    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n)\n",
            "labels": {
              "workload_type": "statefulset"
            },
            "record": "namespace_workload_pod:kube_pod_owner:relabel"
          },
          {
            "expr": "max by (cluster, namespace, workload, pod) (\n  label_replace(\n    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"Job\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n)\n",
            "labels": {
              "workload_type": "job"
            },
            "record": "namespace_workload_pod:kube_pod_owner:relabel"
          }
        ]
      },
      {
        "name": "kube-scheduler.rules",
        "rules": [
          {
            "expr": "histogram_quantile(0.99, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.99"
            },
            "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.99"
            },
            "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.99"
            },
            "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.9, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.9"
            },
            "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.9, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.9"
            },
            "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.9, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.9"
            },
            "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.5, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.5"
            },
            "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.5, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.5"
            },
            "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.5, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"scheduler\"}[5m])) without(instance, pod))\n",
            "labels": {
              "quantile": "0.5"
            },
            "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
          }
        ]
      },
      {
        "name": "node.rules",
        "rules": [
          {
            "expr": "topk by(cluster, namespace, pod) (1,\n  max by (cluster, node, namespace, pod) (\n    label_replace(kube_pod_info{job=\"kube-state-metrics\",node!=\"\"}, \"pod\", \"$1\", \"pod\", \"(.*)\")\n))\n",
            "record": "node_namespace_pod:kube_pod_info:"
          },
          {
            "expr": "sum(\n  node_memory_MemAvailable_bytes{job=\"node-exporter\"} or\n  (\n    node_memory_Buffers_bytes{job=\"node-exporter\"} +\n    node_memory_Cached_bytes{job=\"node-exporter\"} +\n    node_memory_MemFree_bytes{job=\"node-exporter\"} +\n    node_memory_Slab_bytes{job=\"node-exporter\"}\n  )\n) by (cluster)\n",
            "record": ":node_memory_MemAvailable_bytes:sum"
          },
          {
            "expr": "sum(rate(node_cpu_seconds_total{job=\"node-exporter\",mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m])) /\ncount(sum(node_cpu_seconds_total{job=\"node-exporter\"}) by (cluster, instance, cpu))\n",
            "record": "cluster:node_cpu:ratio_rate5m"
          }
        ]
      },
      {
        "name": "kubelet.rules",
        "rules": [
          {
            "expr": "histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_duration_seconds_bucket[5m])) by (cluster, instance, le) * on(cluster, instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"})\n",
            "labels": {
              "quantile": "0.99"
            },
            "record": "node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.9, sum(rate(kubelet_pleg_relist_duration_seconds_bucket[5m])) by (cluster, instance, le) * on(cluster, instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"})\n",
            "labels": {
              "quantile": "0.9"
            },
            "record": "node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile"
          },
          {
            "expr": "histogram_quantile(0.5, sum(rate(kubelet_pleg_relist_duration_seconds_bucket[5m])) by (cluster, instance, le) * on(cluster, instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"})\n",
            "labels": {
              "quantile": "0.5"
            },
            "record": "node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:29:49Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "exporter",
      "app.kubernetes.io/name": "node-exporter",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "1.3.1",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "node-exporter-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "8745",
    "uid": "f434b8f2-0441-478a-b394-c24231e59e57"
  },
  "spec": {
    "groups": [
      {
        "name": "node-exporter",
        "rules": [
          {
            "alert": "NodeFilesystemSpaceFillingUp",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available space left and is filling up.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemSpaceFillingUp.md",
              "summary": "Filesystem is predicted to run out of space within the next 24 hours."
            },
            "expr": "(\n  node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 15\nand\n  predict_linear(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"}[6h], 24*60*60) < 0\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFilesystemSpaceFillingUp",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available space left and is filling up fast.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemSpaceFillingUp.md",
              "summary": "Filesystem is predicted to run out of space within the next 4 hours."
            },
            "expr": "(\n  node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 10\nand\n  predict_linear(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeFilesystemAlmostOutOfSpace",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available space left.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemAlmostOutOfSpace.md",
              "summary": "Filesystem has less than 5% space left."
            },
            "expr": "(\n  node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 5\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "30m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFilesystemAlmostOutOfSpace",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available space left.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemAlmostOutOfSpace.md",
              "summary": "Filesystem has less than 3% space left."
            },
            "expr": "(\n  node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 3\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "30m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeFilesystemFilesFillingUp",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available inodes left and is filling up.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemFilesFillingUp.md",
              "summary": "Filesystem is predicted to run out of inodes within the next 24 hours."
            },
            "expr": "(\n  node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 40\nand\n  predict_linear(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"}[6h], 24*60*60) < 0\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFilesystemFilesFillingUp",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available inodes left and is filling up fast.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemFilesFillingUp.md",
              "summary": "Filesystem is predicted to run out of inodes within the next 4 hours."
            },
            "expr": "(\n  node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 20\nand\n  predict_linear(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeFilesystemAlmostOutOfFiles",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available inodes left.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemAlmostOutOfFiles.md",
              "summary": "Filesystem has less than 5% inodes left."
            },
            "expr": "(\n  node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 5\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFilesystemAlmostOutOfFiles",
            "annotations": {
              "description": "Filesystem on {{ $labels.device }} at {{ $labels.instance }} has only {{ printf \"%.2f\" $value }}% available inodes left.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFilesystemAlmostOutOfFiles.md",
              "summary": "Filesystem has less than 3% inodes left."
            },
            "expr": "(\n  node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 3\nand\n  node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0\n)\n",
            "for": "1h",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeNetworkReceiveErrs",
            "annotations": {
              "description": "{{ $labels.instance }} interface {{ $labels.device }} has encountered {{ printf \"%.0f\" $value }} receive errors in the last two minutes.",
              "summary": "Network interface is reporting many receive errors."
            },
            "expr": "rate(node_network_receive_errs_total[2m]) / rate(node_network_receive_packets_total[2m]) > 0.01\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeNetworkTransmitErrs",
            "annotations": {
              "description": "{{ $labels.instance }} interface {{ $labels.device }} has encountered {{ printf \"%.0f\" $value }} transmit errors in the last two minutes.",
              "summary": "Network interface is reporting many transmit errors."
            },
            "expr": "rate(node_network_transmit_errs_total[2m]) / rate(node_network_transmit_packets_total[2m]) > 0.01\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeHighNumberConntrackEntriesUsed",
            "annotations": {
              "description": "{{ $value | humanizePercentage }} of conntrack entries are used.",
              "summary": "Number of conntrack are getting close to the limit."
            },
            "expr": "(node_nf_conntrack_entries / node_nf_conntrack_entries_limit) > 0.75\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeTextFileCollectorScrapeError",
            "annotations": {
              "description": "Node Exporter text file collector failed to scrape.",
              "summary": "Node Exporter text file collector failed to scrape."
            },
            "expr": "node_textfile_scrape_error{job=\"node-exporter\"} == 1\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeClockSkewDetected",
            "annotations": {
              "description": "Clock on {{ $labels.instance }} is out of sync by more than 300s. Ensure NTP is configured correctly on this host.",
              "summary": "Clock skew detected."
            },
            "expr": "(\n  node_timex_offset_seconds > 0.05\nand\n  deriv(node_timex_offset_seconds[5m]) >= 0\n)\nor\n(\n  node_timex_offset_seconds < -0.05\nand\n  deriv(node_timex_offset_seconds[5m]) <= 0\n)\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeClockNotSynchronising",
            "annotations": {
              "description": "Clock on {{ $labels.instance }} is not synchronising. Ensure NTP is configured on this host.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeClockNotSynchronising.md",
              "summary": "Clock not synchronising."
            },
            "expr": "min_over_time(node_timex_sync_status[5m]) == 0\nand\nnode_timex_maxerror_seconds >= 16\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeRAIDDegraded",
            "annotations": {
              "description": "RAID array '{{ $labels.device }}' on {{ $labels.instance }} is in degraded state due to one or more disks failures. Number of spare drives is insufficient to fix issue automatically.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeRAIDDegraded.md",
              "summary": "RAID Array is degraded"
            },
            "expr": "node_md_disks_required - ignoring (state) (node_md_disks{state=\"active\"}) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NodeRAIDDiskFailure",
            "annotations": {
              "description": "At least one device in RAID array on {{ $labels.instance }} failed. Array '{{ $labels.device }}' needs attention and possibly a disk swap.",
              "summary": "Failed device in RAID array"
            },
            "expr": "node_md_disks{state=\"failed\"} > 0\n",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFileDescriptorLimit",
            "annotations": {
              "description": "File descriptors limit at {{ $labels.instance }} is currently at {{ printf \"%.2f\" $value }}%.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFileDescriptorLimit.md",
              "summary": "Kernel is predicted to exhaust file descriptors limit soon."
            },
            "expr": "(\n  node_filefd_allocated{job=\"node-exporter\"} * 100 / node_filefd_maximum{job=\"node-exporter\"} > 70\n)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "NodeFileDescriptorLimit",
            "annotations": {
              "description": "File descriptors limit at {{ $labels.instance }} is currently at {{ printf \"%.2f\" $value }}%.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/NodeFileDescriptorLimit.md",
              "summary": "Kernel is predicted to exhaust file descriptors limit soon."
            },
            "expr": "(\n  node_filefd_allocated{job=\"node-exporter\"} * 100 / node_filefd_maximum{job=\"node-exporter\"} > 90\n)\n",
            "for": "15m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      },
      {
        "name": "node-exporter.rules",
        "rules": [
          {
            "expr": "count without (cpu, mode) (\n  node_cpu_seconds_total{job=\"node-exporter\",mode=\"idle\"}\n)\n",
            "record": "instance:node_num_cpu:sum"
          },
          {
            "expr": "1 - avg without (cpu) (\n  sum without (mode) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode=~\"idle|iowait|steal\"}[1m]))\n)\n",
            "record": "instance:node_cpu_utilisation:rate1m"
          },
          {
            "expr": "(\n  node_load1{job=\"node-exporter\"}\n/\n  instance:node_num_cpu:sum{job=\"node-exporter\"}\n)\n",
            "record": "instance:node_load1_per_cpu:ratio"
          },
          {
            "expr": "1 - (\n  (\n    node_memory_MemAvailable_bytes{job=\"node-exporter\"}\n    or\n    (\n      node_memory_Buffers_bytes{job=\"node-exporter\"}\n      +\n      node_memory_Cached_bytes{job=\"node-exporter\"}\n      +\n      node_memory_MemFree_bytes{job=\"node-exporter\"}\n      +\n      node_memory_Slab_bytes{job=\"node-exporter\"}\n    )\n  )\n/\n  node_memory_MemTotal_bytes{job=\"node-exporter\"}\n)\n",
            "record": "instance:node_memory_utilisation:ratio"
          },
          {
            "expr": "rate(node_vmstat_pgmajfault{job=\"node-exporter\"}[1m])\n",
            "record": "instance:node_vmstat_pgmajfault:rate1m"
          },
          {
            "expr": "rate(node_disk_io_time_seconds_total{job=\"node-exporter\", device=~\"mmcblk.p.+|nvme.+|sd.+|vd.+|xvd.+|dm-.+|dasd.+\"}[1m])\n",
            "record": "instance_device:node_disk_io_time_seconds:rate1m"
          },
          {
            "expr": "rate(node_disk_io_time_weighted_seconds_total{job=\"node-exporter\", device=~\"mmcblk.p.+|nvme.+|sd.+|vd.+|xvd.+|dm-.+|dasd.+\"}[1m])\n",
            "record": "instance_device:node_disk_io_time_weighted_seconds:rate1m"
          },
          {
            "expr": "sum without (device) (\n  rate(node_network_receive_bytes_total{job=\"node-exporter\", device!=\"lo\"}[1m])\n)\n",
            "record": "instance:node_network_receive_bytes_excluding_lo:rate1m"
          },
          {
            "expr": "sum without (device) (\n  rate(node_network_transmit_bytes_total{job=\"node-exporter\", device!=\"lo\"}[1m])\n)\n",
            "record": "instance:node_network_transmit_bytes_excluding_lo:rate1m"
          },
          {
            "expr": "sum without (device) (\n  rate(node_network_receive_drop_total{job=\"node-exporter\", device!=\"lo\"}[1m])\n)\n",
            "record": "instance:node_network_receive_drop_excluding_lo:rate1m"
          },
          {
            "expr": "sum without (device) (\n  rate(node_network_transmit_drop_total{job=\"node-exporter\", device!=\"lo\"}[1m])\n)\n",
            "record": "instance:node_network_transmit_drop_excluding_lo:rate1m"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:33:41Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "prometheus",
      "app.kubernetes.io/instance": "k8s",
      "app.kubernetes.io/name": "prometheus",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "2.36.2",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "prometheus-k8s-prometheus-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "11932",
    "uid": "a878a0ea-3ee4-494e-9309-5b0aa7ffd886"
  },
  "spec": {
    "groups": [
      {
        "name": "prometheus",
        "rules": [
          {
            "alert": "PrometheusBadConfig",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to reload its configuration.",
              "summary": "Failed Prometheus configuration reload."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\nmax_over_time(prometheus_config_last_reload_successful{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) == 0\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusNotificationQueueRunningFull",
            "annotations": {
              "description": "Alert notification queue of Prometheus {{$labels.namespace}}/{{$labels.pod}} is running full.",
              "summary": "Prometheus alert notification queue predicted to run full in less than 30m."
            },
            "expr": "# Without min_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\n(\n  predict_linear(prometheus_notifications_queue_length{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m], 60 * 30)\n>\n  min_over_time(prometheus_notifications_queue_capacity{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusErrorSendingAlertsToSomeAlertmanagers",
            "annotations": {
              "description": "{{ printf \"%.1f\" $value }}% errors while sending alerts from Prometheus {{$labels.namespace}}/{{$labels.pod}} to Alertmanager {{$labels.alertmanager}}.",
              "summary": "Prometheus has encountered more than 1% errors sending alerts to a specific Alertmanager."
            },
            "expr": "(\n  rate(prometheus_notifications_errors_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n/\n  rate(prometheus_notifications_sent_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n)\n* 100\n> 1\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusNotConnectedToAlertmanagers",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} is not connected to any Alertmanagers.",
              "summary": "Prometheus is not connected to any Alertmanagers."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\nmax_over_time(prometheus_notifications_alertmanagers_discovered{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) < 1\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusTSDBReloadsFailing",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value | humanize}} reload failures over the last 3h.",
              "summary": "Prometheus has issues reloading blocks from disk."
            },
            "expr": "increase(prometheus_tsdb_reloads_failures_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[3h]) > 0\n",
            "for": "4h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusTSDBCompactionsFailing",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value | humanize}} compaction failures over the last 3h.",
              "summary": "Prometheus has issues compacting blocks."
            },
            "expr": "increase(prometheus_tsdb_compactions_failed_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[3h]) > 0\n",
            "for": "4h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusNotIngestingSamples",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} is not ingesting samples.",
              "summary": "Prometheus is not ingesting samples."
            },
            "expr": "(\n  rate(prometheus_tsdb_head_samples_appended_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) <= 0\nand\n  (\n    sum without(scrape_job) (prometheus_target_metadata_cache_entries{job=~\"prometheus-k8s|prometheus-user-workload\"}) > 0\n  or\n    sum without(rule_group) (prometheus_rule_group_rules{job=~\"prometheus-k8s|prometheus-user-workload\"}) > 0\n  )\n)\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusDuplicateTimestamps",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{ printf \"%.4g\" $value  }} samples/s with different values but duplicated timestamp.",
              "summary": "Prometheus is dropping samples with duplicate timestamps."
            },
            "expr": "rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOutOfOrderTimestamps",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{ printf \"%.4g\" $value  }} samples/s with timestamps arriving out of order.",
              "summary": "Prometheus drops samples with out-of-order timestamps."
            },
            "expr": "rate(prometheus_target_scrapes_sample_out_of_order_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusRemoteStorageFailures",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} failed to send {{ printf \"%.1f\" $value }}% of the samples to {{ $labels.remote_name}}:{{ $labels.url }}",
              "summary": "Prometheus fails to send samples to remote storage."
            },
            "expr": "(\n  (rate(prometheus_remote_storage_failed_samples_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]))\n/\n  (\n    (rate(prometheus_remote_storage_failed_samples_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]))\n  +\n    (rate(prometheus_remote_storage_succeeded_samples_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) or rate(prometheus_remote_storage_samples_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]))\n  )\n)\n* 100\n> 1\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusRemoteWriteBehind",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write is {{ printf \"%.1f\" $value }}s behind for {{ $labels.remote_name}}:{{ $labels.url }}.",
              "summary": "Prometheus remote write is behind."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\n(\n  max_over_time(prometheus_remote_storage_highest_timestamp_in_seconds{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n- ignoring(remote_name, url) group_right\n  max_over_time(prometheus_remote_storage_queue_highest_sent_timestamp_seconds{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n)\n> 120\n",
            "for": "15m",
            "labels": {
              "severity": "info"
            }
          },
          {
            "alert": "PrometheusRemoteWriteDesiredShards",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write desired shards calculation wants to run {{ $value }} shards for queue {{ $labels.remote_name}}:{{ $labels.url }}, which is more than the max of {{ printf `prometheus_remote_storage_shards_max{instance=\"%s\",job=~\"prometheus-k8s|prometheus-user-workload\"}` $labels.instance | query | first | value }}.",
              "summary": "Prometheus remote write desired shards calculation wants to run more than configured max shards."
            },
            "expr": "# Without max_over_time, failed scrapes could create false negatives, see\n# https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.\n(\n  max_over_time(prometheus_remote_storage_shards_desired{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n>\n  max_over_time(prometheus_remote_storage_shards_max{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m])\n)\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusRuleFailures",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to evaluate {{ printf \"%.0f\" $value }} rules in the last 5m.",
              "summary": "Prometheus is failing rule evaluations."
            },
            "expr": "increase(prometheus_rule_evaluation_failures_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusMissingRuleEvaluations",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has missed {{ printf \"%.0f\" $value }} rule group evaluations in the last 5m.",
              "summary": "Prometheus is missing rule evaluations due to slow rule group evaluation."
            },
            "expr": "increase(prometheus_rule_group_iterations_missed_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusTargetLimitHit",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{ printf \"%.0f\" $value }} targets because the number of targets exceeded the configured target_limit.",
              "summary": "Prometheus has dropped targets because some scrape configs have exceeded the targets limit."
            },
            "expr": "increase(prometheus_target_scrape_pool_exceeded_target_limit_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusLabelLimitHit",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{ printf \"%.0f\" $value }} targets because some samples exceeded the configured label_limit, label_name_length_limit or label_value_length_limit.",
              "summary": "Prometheus has dropped targets because some scrape configs have exceeded the labels limit."
            },
            "expr": "increase(prometheus_target_scrape_pool_exceeded_label_limits_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusScrapeBodySizeLimitHit",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{ printf \"%.0f\" $value }} scrapes in the last 5m because some targets exceeded the configured body_size_limit.",
              "summary": "Prometheus has dropped some targets that exceeded body size limit."
            },
            "expr": "increase(prometheus_target_scrapes_exceeded_body_size_limit_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusScrapeSampleLimitHit",
            "annotations": {
              "description": "Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{ printf \"%.0f\" $value }} scrapes in the last 5m because some targets exceeded the configured sample_limit.",
              "summary": "Prometheus has failed scrapes that have exceeded the configured sample limit."
            },
            "expr": "increase(prometheus_target_scrapes_exceeded_sample_limit_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[5m]) > 0\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusTargetSyncFailure",
            "annotations": {
              "description": "{{ printf \"%.0f\" $value }} targets in Prometheus {{$labels.namespace}}/{{$labels.pod}} have failed to sync because invalid configuration was supplied.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/PrometheusTargetSyncFailure.md",
              "summary": "Prometheus has failed to sync targets."
            },
            "expr": "increase(prometheus_target_sync_failed_total{job=~\"prometheus-k8s|prometheus-user-workload\"}[30m]) > 0\n",
            "for": "5m",
            "labels": {
              "severity": "critical"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:33:41Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "prometheus",
      "app.kubernetes.io/instance": "k8s",
      "app.kubernetes.io/name": "prometheus",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "2.36.2",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "prometheus-k8s-thanos-sidecar-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "11933",
    "uid": "0750d841-fbdd-41e1-b255-67dc713fa0df"
  },
  "spec": {
    "groups": [
      {
        "name": "thanos-sidecar",
        "rules": [
          {
            "alert": "ThanosSidecarBucketOperationsFailed",
            "annotations": {
              "description": "Thanos Sidecar {{$labels.instance}} in {{$labels.namespace}} bucket operations are failing",
              "summary": "Thanos Sidecar bucket operations are failing"
            },
            "expr": "sum by (namespace, job, instance) (rate(thanos_objstore_bucket_operation_failures_total{job=~\"prometheus-(k8s|user-workload)-thanos-sidecar\"}[5m])) > 0\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ThanosSidecarNoConnectionToStartedPrometheus",
            "annotations": {
              "description": "Thanos Sidecar {{$labels.instance}} in {{$labels.namespace}} is unhealthy.",
              "summary": "Thanos Sidecar cannot access Prometheus, even though Prometheus seems healthy and has reloaded WAL."
            },
            "expr": "thanos_sidecar_prometheus_up{job=~\"prometheus-(k8s|user-workload)-thanos-sidecar\"} == 0\nAND on (namespace, pod)\nprometheus_tsdb_data_replay_duration_seconds != 0\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:28:56Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "controller",
      "app.kubernetes.io/name": "prometheus-operator",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "0.57.0",
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "prometheus-operator-rules",
    "namespace": "openshift-monitoring",
    "resourceVersion": "7956",
    "uid": "1ac781f2-2df8-4e93-a7a6-585712818c1b"
  },
  "spec": {
    "groups": [
      {
        "name": "prometheus-operator",
        "rules": [
          {
            "alert": "PrometheusOperatorListErrors",
            "annotations": {
              "description": "Errors while performing List operations in controller {{$labels.controller}} in {{$labels.namespace}} namespace.",
              "summary": "Errors while performing list operations in controller."
            },
            "expr": "(sum by (controller,namespace) (rate(prometheus_operator_list_operations_failed_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[10m])) / sum by (controller,namespace) (rate(prometheus_operator_list_operations_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[10m]))) > 0.4\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorWatchErrors",
            "annotations": {
              "description": "Errors while performing watch operations in controller {{$labels.controller}} in {{$labels.namespace}} namespace.",
              "summary": "Errors while performing watch operations in controller."
            },
            "expr": "(sum by (controller,namespace) (rate(prometheus_operator_watch_operations_failed_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m])) / sum by (controller,namespace) (rate(prometheus_operator_watch_operations_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]))) > 0.4\n",
            "for": "15m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorSyncFailed",
            "annotations": {
              "description": "Controller {{ $labels.controller }} in {{ $labels.namespace }} namespace fails to reconcile {{ $value }} objects.",
              "summary": "Last controller reconciliation failed"
            },
            "expr": "min_over_time(prometheus_operator_syncs{status=\"failed\",job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]) > 0\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorReconcileErrors",
            "annotations": {
              "description": "{{ $value | humanizePercentage }} of reconciling operations failed for {{ $labels.controller }} controller in {{ $labels.namespace }} namespace.",
              "summary": "Errors while reconciling controller."
            },
            "expr": "(sum by (controller,namespace) (rate(prometheus_operator_reconcile_errors_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]))) / (sum by (controller,namespace) (rate(prometheus_operator_reconcile_operations_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]))) > 0.1\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorNodeLookupErrors",
            "annotations": {
              "description": "Errors while reconciling Prometheus in {{ $labels.namespace }} Namespace.",
              "summary": "Errors while reconciling Prometheus."
            },
            "expr": "rate(prometheus_operator_node_address_lookup_errors_total{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]) > 0.1\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorNotReady",
            "annotations": {
              "description": "Prometheus operator in {{ $labels.namespace }} namespace isn't ready to reconcile {{ $labels.controller }} resources.",
              "summary": "Prometheus operator not ready"
            },
            "expr": "min by (controller,namespace) (max_over_time(prometheus_operator_ready{job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]) == 0)\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "PrometheusOperatorRejectedResources",
            "annotations": {
              "description": "Prometheus operator in {{ $labels.namespace }} namespace rejected {{ printf \"%0.0f\" $value }} {{ $labels.controller }}/{{ $labels.resource }} resources.",
              "summary": "Resources rejected by Prometheus operator"
            },
            "expr": "min_over_time(prometheus_operator_managed_resources{state=\"rejected\",job=\"prometheus-operator\", namespace=~\"openshift-monitoring|openshift-user-workload-monitoring\"}[5m]) > 0\n",
            "for": "5m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "config-reloaders",
        "rules": [
          {
            "alert": "ConfigReloaderSidecarErrors",
            "annotations": {
              "description": "Errors encountered while the {{$labels.pod}} config-reloader sidecar attempts to sync config in {{$labels.namespace}} namespace.\nAs a result, configuration for service running in {{$labels.pod}} may be stale and cannot be updated anymore.",
              "summary": "config-reloader sidecar has not had a successful reload for 10m"
            },
            "expr": "max_over_time(reloader_last_reload_successful{namespace=~\".+\"}[5m]) == 0\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:30:35Z",
    "generation": 1,
    "name": "telemetry",
    "namespace": "openshift-monitoring",
    "resourceVersion": "9881",
    "uid": "2df62579-3186-46e9-a937-8e5def2911ec"
  },
  "spec": {
    "groups": [
      {
        "name": "telemeter.rules",
        "rules": [
          {
            "expr": "max(federate_samples - federate_filtered_samples)",
            "record": "cluster:telemetry_selected_series:count"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "creationTimestamp": "2022-10-12T21:36:27Z",
    "generation": 1,
    "labels": {
      "app.kubernetes.io/component": "query-layer",
      "app.kubernetes.io/instance": "thanos-querier",
      "app.kubernetes.io/name": "thanos-query",
      "app.kubernetes.io/part-of": "openshift-monitoring",
      "app.kubernetes.io/version": "0.26.0"
    },
    "name": "thanos-querier",
    "namespace": "openshift-monitoring",
    "resourceVersion": "13402",
    "uid": "9ff883a2-459e-43fa-a658-15c126b8a1cb"
  },
  "spec": {
    "groups": [
      {
        "name": "thanos-query",
        "rules": [
          {
            "alert": "ThanosQueryHttpRequestQueryErrorRateHigh",
            "annotations": {
              "description": "Thanos Query {{$labels.job}} in {{$labels.namespace}} is failing to handle {{$value | humanize}}% of \"query\" requests.",
              "summary": "Thanos Query is failing to handle requests."
            },
            "expr": "(\n  sum by (namespace, job) (rate(http_requests_total{code=~\"5..\", job=\"thanos-querier\", handler=\"query\"}[5m]))\n/\n  sum by (namespace, job) (rate(http_requests_total{job=\"thanos-querier\", handler=\"query\"}[5m]))\n) * 100 > 5\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ThanosQueryHttpRequestQueryRangeErrorRateHigh",
            "annotations": {
              "description": "Thanos Query {{$labels.job}} in {{$labels.namespace}} is failing to handle {{$value | humanize}}% of \"query_range\" requests.",
              "summary": "Thanos Query is failing to handle requests."
            },
            "expr": "(\n  sum by (namespace, job) (rate(http_requests_total{code=~\"5..\", job=\"thanos-querier\", handler=\"query_range\"}[5m]))\n/\n  sum by (namespace, job) (rate(http_requests_total{job=\"thanos-querier\", handler=\"query_range\"}[5m]))\n) * 100 > 5\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ThanosQueryGrpcServerErrorRate",
            "annotations": {
              "description": "Thanos Query {{$labels.job}} in {{$labels.namespace}} is failing to handle {{$value | humanize}}% of requests.",
              "summary": "Thanos Query is failing to handle requests."
            },
            "expr": "(\n  sum by (namespace, job) (rate(grpc_server_handled_total{grpc_code=~\"Unknown|ResourceExhausted|Internal|Unavailable|DataLoss|DeadlineExceeded\", job=\"thanos-querier\"}[5m]))\n/\n  sum by (namespace, job) (rate(grpc_server_started_total{job=\"thanos-querier\"}[5m]))\n* 100 > 5\n)\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ThanosQueryGrpcClientErrorRate",
            "annotations": {
              "description": "Thanos Query {{$labels.job}} in {{$labels.namespace}} is failing to send {{$value | humanize}}% of requests.",
              "summary": "Thanos Query is failing to send requests."
            },
            "expr": "(\n  sum by (namespace, job) (rate(grpc_client_handled_total{grpc_code!=\"OK\", job=\"thanos-querier\"}[5m]))\n/\n  sum by (namespace, job) (rate(grpc_client_started_total{job=\"thanos-querier\"}[5m]))\n) * 100 > 5\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "ThanosQueryHighDNSFailures",
            "annotations": {
              "description": "Thanos Query {{$labels.job}} in {{$labels.namespace}} have {{$value | humanize}}% of failing DNS queries for store endpoints.",
              "summary": "Thanos Query is having high number of DNS failures."
            },
            "expr": "(\n  sum by (namespace, job) (rate(thanos_query_store_apis_dns_failures_total{job=\"thanos-querier\"}[5m]))\n/\n  sum by (namespace, job) (rate(thanos_query_store_apis_dns_lookups_total{job=\"thanos-querier\"}[5m]))\n) * 100 > 1\n",
            "for": "1h",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "networkoperator.openshift.io/ignore-errors": ""
    },
    "creationTimestamp": "2022-10-12T21:18:38Z",
    "generation": 1,
    "labels": {
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "prometheus-k8s-rules",
    "namespace": "openshift-multus",
    "ownerReferences": [
      {
        "apiVersion": "operator.openshift.io/v1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Network",
        "name": "cluster",
        "uid": "cca9f61e-9fe2-40da-a0a2-6bd8f13025e3"
      }
    ],
    "resourceVersion": "2760",
    "uid": "a99a715d-2ddf-4bdf-b990-b53c683c4f06"
  },
  "spec": {
    "groups": [
      {
        "name": "multus-admission-controller-monitor-service.rules",
        "rules": [
          {
            "expr": "max  (network_attachment_definition_enabled_instance_up) by (networks)\n",
            "record": "cluster:network_attachment_definition_enabled_instance_up:max"
          },
          {
            "expr": "max  (network_attachment_definition_instances) by (networks)\n",
            "record": "cluster:network_attachment_definition_instances:max"
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "include.release.openshift.io/ibm-cloud-managed": "true",
      "include.release.openshift.io/self-managed-high-availability": "true"
    },
    "creationTimestamp": "2022-10-12T19:32:44Z",
    "generation": 1,
    "labels": {
      "prometheus": "alert-rules",
      "role": "alert-rules"
    },
    "name": "olm-alert-rules",
    "namespace": "openshift-operator-lifecycle-manager",
    "ownerReferences": [
      {
        "apiVersion": "config.openshift.io/v1",
        "kind": "ClusterVersion",
        "name": "version",
        "uid": "f643f126-5a61-41cd-b92f-85c3d2ac420d"
      }
    ],
    "resourceVersion": "1744",
    "uid": "b95f8537-e958-4b1d-9a3e-82ebbef87257"
  },
  "spec": {
    "groups": [
      {
        "name": "olm.csv_abnormal.rules",
        "rules": [
          {
            "alert": "CsvAbnormalFailedOver2Min",
            "annotations": {
              "description": "Fires whenever a CSV has been in the failed phase for more than 2 minutes.",
              "message": "Failed to install Operator {{ $labels.name }} version {{ $labels.version }}. Reason-{{ $labels.reason }}",
              "summary": "CSV failed for over 2 minutes"
            },
            "expr": "csv_abnormal{phase=~\"^Failed$\"}",
            "for": "2m",
            "labels": {
              "namespace": "{{ $labels.namespace }}",
              "severity": "warning"
            }
          },
          {
            "alert": "CsvAbnormalOver30Min",
            "annotations": {
              "description": "Fires whenever a CSV is in the Replacing, Pending, Deleting, or Unkown phase for more than 30 minutes.",
              "message": "Failed to install Operator {{ $labels.name }} version {{ $labels.version }}. Phase-{{ $labels.phase }} Reason-{{ $labels.reason }}",
              "summary": "CSV abnormal for over 30 minutes"
            },
            "expr": "csv_abnormal{phase=~\"(^Replacing$|^Pending$|^Deleting$|^Unknown$)\"}",
            "for": "30m",
            "labels": {
              "namespace": "{{ $labels.namespace }}",
              "severity": "warning"
            }
          }
        ]
      },
      {
        "name": "olm.installplan.rules",
        "rules": [
          {
            "alert": "InstallPlanStepAppliedWithWarnings",
            "annotations": {
              "description": "Fires whenever the API server returns a warning when attempting to modify an operator.",
              "message": "The API server returned a warning during installation or upgrade of an operator. An Event with reason \"AppliedWithWarnings\" has been created with complete details, including a reference to the InstallPlan step that generated the warning.",
              "summary": "API returned a warning when modifying an operator"
            },
            "expr": "sum(increase(installplan_warnings_total[5m])) > 0",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "networkoperator.openshift.io/ignore-errors": ""
    },
    "creationTimestamp": "2022-10-12T21:18:42Z",
    "generation": 1,
    "labels": {
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "master-rules",
    "namespace": "openshift-ovn-kubernetes",
    "ownerReferences": [
      {
        "apiVersion": "operator.openshift.io/v1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Network",
        "name": "cluster",
        "uid": "cca9f61e-9fe2-40da-a0a2-6bd8f13025e3"
      }
    ],
    "resourceVersion": "2821",
    "uid": "dbcb2003-c581-4657-bcb1-b174e774edc3"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-network-operator-master.rules",
        "rules": [
          {
            "expr": "max(ovnkube_master_egress_routing_via_host)",
            "record": "cluster:ovnkube_master_egress_routing_via_host:max"
          },
          {
            "alert": "NoRunningOvnMaster",
            "annotations": {
              "description": "Networking control plane is degraded. Networking configuration updates applied to the cluster will not be\nimplemented while there are no OVN Kubernetes pods.\n",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-network-operator/NoRunningOvnMaster.md",
              "summary": "There is no running ovn-kubernetes master."
            },
            "expr": "absent(up{job=\"ovnkube-master\", namespace=\"openshift-ovn-kubernetes\"} == 1)\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NoOvnMasterLeader",
            "annotations": {
              "description": "Networking control plane is degraded. Networking configuration updates applied to the cluster will not be\nimplemented while there is no OVN Kubernetes leader. Existing workloads should continue to have connectivity.\nOVN-Kubernetes control plane is not functional.\n",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-network-operator/NoOvnMasterLeader.md",
              "summary": "There is no ovn-kubernetes master leader."
            },
            "expr": "max(ovnkube_master_leader) == 0\n",
            "for": "10m",
            "labels": {
              "severity": "critical"
            }
          },
          {
            "alert": "NorthboundStale",
            "annotations": {
              "description": "Networking control plane is degraded. Networking configuration updates applied to the cluster will not be\nimplemented. Existing workloads should continue to have connectivity. OVN-Kubernetes control plane and/or\nOVN northbound database may not be functional.\n",
              "summary": "ovn-kubernetes has not written anything to the northbound database for too long."
            },
            "expr": "time() - max(ovnkube_master_nb_e2e_timestamp) > 120\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "SouthboundStale",
            "annotations": {
              "description": "Networking control plane is degraded. Networking configuration updates may not be applied to the cluster or\ntaking a long time to apply. This usually means there is a large load on OVN component 'northd' or it is not\nfunctioning.\n",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-network-operator/SouthboundStaleAlert.md",
              "summary": "ovn-northd has not successfully synced any changes to the southbound DB for too long."
            },
            "expr": "max(ovnkube_master_nb_e2e_timestamp) - max(ovnkube_master_sb_e2e_timestamp) > 120\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "V4SubnetAllocationThresholdExceeded",
            "annotations": {
              "description": "More than 80% of IPv4 subnets are used. Insufficient IPv4 subnets could degrade provisioning of workloads.",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-network-operator/V4SubnetAllocationThresholdExceeded.md",
              "summary": "More than 80% of v4 subnets available to assign to the nodes are allocated. Current v4 subnet allocation percentage is {{ $value }}."
            },
            "expr": "ovnkube_master_allocated_v4_host_subnets/ovnkube_master_num_v4_host_subnets * 100 > 80\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          },
          {
            "alert": "V6SubnetAllocationThresholdExceeded",
            "annotations": {
              "description": "More than 80% of IPv6 subnets are used. Insufficient IPv6 subnets could degrade provisioning of workloads.",
              "summary": "More than 80% of the v6 subnets available to assign to the nodes are allocated. Current v6 subnet allocation percentage is {{ $value }}."
            },
            "expr": "ovnkube_master_allocated_v6_host_subnets/ovnkube_master_num_v6_host_subnets * 100 > 80\n",
            "for": "10m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
{
  "apiVersion": "monitoring.coreos.com/v1",
  "kind": "PrometheusRule",
  "metadata": {
    "annotations": {
      "networkoperator.openshift.io/ignore-errors": ""
    },
    "creationTimestamp": "2022-10-12T21:18:42Z",
    "generation": 1,
    "labels": {
      "prometheus": "k8s",
      "role": "alert-rules"
    },
    "name": "networking-rules",
    "namespace": "openshift-ovn-kubernetes",
    "ownerReferences": [
      {
        "apiVersion": "operator.openshift.io/v1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Network",
        "name": "cluster",
        "uid": "cca9f61e-9fe2-40da-a0a2-6bd8f13025e3"
      }
    ],
    "resourceVersion": "2824",
    "uid": "9dc8e597-f7c2-411e-a09f-a442d1971e2b"
  },
  "spec": {
    "groups": [
      {
        "name": "cluster-network-operator-ovn.rules",
        "rules": [
          {
            "alert": "NodeWithoutOVNKubeNodePodRunning",
            "annotations": {
              "description": "Networking is degraded on nodes that do not have a functioning ovnkube-node pod. Existing workloads on the\nnode may continue to have connectivity but any additional workloads will not be provisioned on the node. Any\nnetwork policy changes will not be implemented on existing workloads on the node.\n",
              "runbook_url": "https://github.com/openshift/runbooks/blob/master/alerts/cluster-network-operator/NodeWithoutOVNKubeNodePodRunning.md",
              "summary": "All Linux nodes should be running an ovnkube-node pod, {{ $labels.node }} is not."
            },
            "expr": "(kube_node_info unless on(node) (kube_pod_info{namespace=\"openshift-ovn-kubernetes\",pod=~\"ovnkube-node.*\"}\nor kube_node_labels{label_kubernetes_io_os=\"windows\"})) > 0\n",
            "for": "20m",
            "labels": {
              "severity": "warning"
            }
          }
        ]
      }
    ]
  }
}
